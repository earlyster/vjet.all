/*******************************************************************************
 * Copyright (c) 2012 eBay Inc. and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     eBay Inc. - initial API and implementation
 *******************************************************************************/
package org.eclipse.vjet.vsf.jsruntime.optimizer;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.eclipse.vjet.dsf.common.exceptions.DsfException;


public abstract class JsCodeGenOptimizer<T> {
	//private static final String NEW_LINE = System.getProperty("line.separator");
	//private static final String CREATE_METHOD_PRE = "var _ci=0; function _c(map) { for (var key in map} ";
	//private static final String CREATE_METHOD_POST = " }\n";
	private Map<Object,IJsOptimizer> m_map = new HashMap<Object, IJsOptimizer>();
	private List<Object> m_instances = new ArrayList<Object>();
	//private String m_functionPre = "_";

	public abstract Object getKey(T ref);
	public abstract IJsOptimizer<T> createOptimizer(T ref) throws DsfException;
	public abstract String getFunctionPre(); 
	
	/**
	 * Add new instance of a Js Proxy. Method will find the associate Optimizer
	 * for the given object. Currently JsObj's are acceptable. TODO: make JsFunc's acceptable.
	 * @param refs
	 */
	public void add(T ref) {
		if (ref==null) {
			return;
		}
		//Class clz = ref.getClass();
		Object key = getKey(ref);
		IJsOptimizer<T> optimizer = m_map.get(key);
		
		try {
			if (optimizer==null) {
				optimizer = createOptimizer(ref);
				//method = new JsCreationMethod(ref);
				m_map.put(key, optimizer);
				m_instances.add(ref);
				
			} else {
				optimizer.compare(ref);
				m_instances.add(ref);
				
			}
		} catch (DsfException e) {
			//Problem optimizing. Don't create Optimizer
		}
	}
	
	/**
	 * This method will generate shorthand methods, taking in only variable parameters. For example:
	 * new vjo.darwin.core.common.MyClass(x,y,z) will generate a method like:
	 * function _c0(x) { return new vjo.darwin.core.common.MyClass(x, 1, 2); }
	 * @return
	 */
	public String createDefs() {
		int i = 0;
		StringBuilder buf = new StringBuilder();
		for (IJsOptimizer method : m_map.values()) {
			buf.append(method.createDef(getFunctionPre()+i));
			i++;
		}
		return buf.toString();
	}
	
	/**
	 * This method will generate function calls given a JsObj/JsFunc instance, to the methods generated by the 
	 * createDefs method. This means, you must output the generated defs prior to using this call. An instance
	 * must be successfully "added" to a JsCodeGenOptimizer instance, for an optimized function call to be
	 * generated.
	 * @param ref 
	 * @return
	 */
	public String createCall(T ref){
		if (ref==null) {
			return null;
		}

		IJsOptimizer method = m_map.get(getKey(ref));
		if (method!=null) {
			return method.createCall(ref);
		}
		return null;
	}
	
	public boolean contains(Object obj) {
		if (obj==null) {
			return false;
		}
		return m_instances.contains(obj);
	}
}

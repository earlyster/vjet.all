package org.eclipse.vjet.dsf.jstojava.codegen.data;

import org.eclipse.vjet.vsf.jsref.JsFunc;
import org.eclipse.vjet.dsf.common.binding.IValueBinding;
import org.eclipse.vjet.vsf.jsref.JsObj;
import org.eclipse.vjet.vsf.jsref.JsProp;
import org.eclipse.vjet.vsf.jsruntime.jsref.IJsPropSetter;
import org.eclipse.vjet.vsf.jsref.internals.JsCmpMeta;
import org.eclipse.vjet.vsf.jsref.JsTypeRef;
import org.eclipse.vjet.vsf.jsref.JsObjData;
import org.eclipse.vjet.dsf.spec.component.IComponentSpec;
import org.eclipse.vjet.vsf.resource.pattern.js.JsResource;
import org.eclipse.vjet.vsf.resource.pattern.js.IJsResourceRef;

@org.eclipse.vjet.dsf.resource.utils.CodeGen("JsrGenerator")
public abstract class ATypeJsr extends JsObj {
    private static final long serialVersionUID = 1L;

    private static final JsObjData S = 
        new JsObjData("org.eclipse.vjet.dsf.jstojava.codegen.data.AType", ATypeJsr.class, "AType");

    
    public static class ResourceSpec {
        public static IComponentSpec getInstance() {
            return S.getResourceSpec(); 
        }
        public static final JsResource RESOURCE = S.getJsResource();
        public static final IJsResourceRef REF = S.getJsResourceRef();
    }

    public static final IComponentSpec SPEC = S.getResourceSpec();

    public ATypeJsr(){
        super(S.getJsCmpMeta(), true);
    }

    protected ATypeJsr(JsCmpMeta cmpMeta, boolean isInstance, Object... args) {
        super(cmpMeta, isInstance, args);
    }

    public static JsProp<String> sATypePropOne(){
        return getProp(S, String.class, "sATypePropOne");
    }

    public static IJsPropSetter sATypePropOne(String v) {
        return setProp(S, "sATypePropOne", v);
    }

    public static IJsPropSetter sATypePropOne(IValueBinding<String> v) {
        return setProp(S, "sATypePropOne", v);
    }

    public static JsFunc<Void> ATypeMethodStatic(String arg1){
        return call(S, "ATypeMethodStatic").with(arg1);
    }

    public static JsFunc<Void> ATypeMethodStatic(IValueBinding<String> arg1){
        return call(S, "ATypeMethodStatic").with(arg1);
    }

    public JsProp<String> iATypeProtoOne(){
        return getProp(String.class, "iATypeProtoOne");
    }

    public IJsPropSetter iATypeProtoOne(String v) {
        return setProp("iATypeProtoOne", v);
    }

    public IJsPropSetter iATypeProtoOne(IValueBinding<String> v) {
        return setProp("iATypeProtoOne", v);
    }

    public abstract JsFunc<Void> methodAbstract(String arg);

    public abstract JsFunc<Void> methodAbstract(IValueBinding<String> arg);

    public JsFunc<Void> doIt(String arg){
        return call("doIt").with(arg);
    }

    public JsFunc<Void> doIt(IValueBinding<String> arg){
        return call("doIt").with(arg);
    }
    
    public static JsTypeRef<ATypeJsr> prototype = new JsTypeRef<ATypeJsr>(S);
}
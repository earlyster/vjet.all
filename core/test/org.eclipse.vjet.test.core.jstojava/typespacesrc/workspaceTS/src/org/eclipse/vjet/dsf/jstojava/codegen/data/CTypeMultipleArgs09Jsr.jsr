package vjo.a.b;

import org.eclipse.vjet.vsf.jsref.JsFunc;
import org.eclipse.vjet.dsf.common.binding.IValueBinding;
import org.eclipse.vjet.vsf.jsref.JsObj;
import org.eclipse.vjet.vsf.jsref.internals.JsCmpMeta;
import org.eclipse.vjet.vsf.jsref.JsTypeRef;
import org.eclipse.vjet.vsf.jsref.JsObjData;
import org.eclipse.vjet.dsf.spec.component.IComponentSpec;
import org.eclipse.vjet.vsf.resource.pattern.js.JsResource;
import org.eclipse.vjet.vsf.resource.pattern.js.IJsResourceRef;

@org.eclipse.vjet.dsf.resource.utils.CodeGen("JsrGenerator")
public class CTypeMultipleArgs09Jsr extends JsObj {
    private static final long serialVersionUID = 1L;

    private static final JsObjData S = 
        new JsObjData("vjo.a.b.CTypeMultipleArgs09", CTypeMultipleArgs09Jsr.class, "CTypeMultipleArgs09");

    
    public static class ResourceSpec {
        public static IComponentSpec getInstance() {
            return S.getResourceSpec(); 
        }
        public static final JsResource RESOURCE = S.getJsResource();
        public static final IJsResourceRef REF = S.getJsResourceRef();
    }

    public static final IComponentSpec SPEC = S.getResourceSpec();

    public CTypeMultipleArgs09Jsr(){
        super(S.getJsCmpMeta(), true);
    }

    protected CTypeMultipleArgs09Jsr(JsCmpMeta cmpMeta, boolean isInstance, Object... args) {
        super(cmpMeta, isInstance, args);
    }

    public JsFunc<Void> foo9(long arg0){
        return call("foo9").with(arg0);
    }

    public JsFunc<Void> foo9(IValueBinding<Long> arg0){
        return call("foo9").with(arg0);
    }

    public JsFunc<Void> foo9(float arg0){
        return call("foo9").with(arg0);
    }

    public JsFunc<Void> foo9(IValueBinding<Float> arg0, 
            org.eclipse.vjet.vsf.jsref.d.D1... notUsed){
        return call("foo9").with(arg0);
    }

    public JsFunc<Void> foo9(long arg0, double arg1){
        return call("foo9").with(arg0, arg1);
    }

    public JsFunc<Void> foo9(IValueBinding<Long> arg0, IValueBinding<Double> arg1){
        return call("foo9").with(arg0, arg1);
    }

    public JsFunc<Void> foo9(float arg0, double arg1){
        return call("foo9").with(arg0, arg1);
    }

    public JsFunc<Void> foo9(IValueBinding<Float> arg0, IValueBinding<Double> arg1, 
            org.eclipse.vjet.vsf.jsref.d.D1... notUsed){
        return call("foo9").with(arg0, arg1);
    }

    public JsFunc<Void> foo9(long arg0, double arg1, String arg2){
        return call("foo9").with(arg0, arg1, arg2);
    }

    public JsFunc<Void> foo9(IValueBinding<Long> arg0, IValueBinding<Double> arg1, IValueBinding<String> arg2){
        return call("foo9").with(arg0, arg1, arg2);
    }

    public JsFunc<Void> foo9(float arg0, double arg1, String arg2){
        return call("foo9").with(arg0, arg1, arg2);
    }

    public JsFunc<Void> foo9(IValueBinding<Float> arg0, IValueBinding<Double> arg1, IValueBinding<String> arg2, 
            org.eclipse.vjet.vsf.jsref.d.D1... notUsed){
        return call("foo9").with(arg0, arg1, arg2);
    }
    
    public static JsTypeRef<CTypeMultipleArgs09Jsr> prototype = new JsTypeRef<CTypeMultipleArgs09Jsr>(S);
}
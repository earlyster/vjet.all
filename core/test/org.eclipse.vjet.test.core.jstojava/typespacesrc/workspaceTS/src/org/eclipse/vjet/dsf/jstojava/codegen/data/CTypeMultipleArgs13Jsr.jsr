package vjo.a.b;

import org.eclipse.vjet.vsf.jsref.JsFunc;
import org.eclipse.vjet.dsf.common.binding.IValueBinding;
import org.eclipse.vjet.vsf.jsref.JsObj;
import org.eclipse.vjet.vsf.jsref.internals.JsCmpMeta;
import org.eclipse.vjet.vsf.jsref.JsTypeRef;
import org.eclipse.vjet.vsf.jsref.JsObjData;
import org.eclipse.vjet.dsf.spec.component.IComponentSpec;
import org.eclipse.vjet.vsf.resource.pattern.js.JsResource;
import org.eclipse.vjet.vsf.resource.pattern.js.IJsResourceRef;
import java.util.Date;

@org.eclipse.vjet.dsf.resource.utils.CodeGen("JsrGenerator")
public class CTypeMultipleArgs13Jsr extends JsObj {
    private static final long serialVersionUID = 1L;

    private static final JsObjData S = 
        new JsObjData("vjo.a.b.CTypeMultipleArgs13", CTypeMultipleArgs13Jsr.class, "CTypeMultipleArgs13");

    
    public static class ResourceSpec {
        public static IComponentSpec getInstance() {
            return S.getResourceSpec(); 
        }
        public static final JsResource RESOURCE = S.getJsResource();
        public static final IJsResourceRef REF = S.getJsResourceRef();
    }

    public static final IComponentSpec SPEC = S.getResourceSpec();

    public CTypeMultipleArgs13Jsr(){
        super(S.getJsCmpMeta(), true);
    }

    protected CTypeMultipleArgs13Jsr(JsCmpMeta cmpMeta, boolean isInstance, Object... args) {
        super(cmpMeta, isInstance, args);
    }

    public JsFunc<Void> foo13(int arg0, double arg1, Date arg2){
        return call("foo13").with(arg0, arg1, arg2);
    }

    public JsFunc<Void> foo13(IValueBinding<Integer> arg0, IValueBinding<Double> arg1, IValueBinding<? extends Date> arg2){
        return call("foo13").with(arg0, arg1, arg2);
    }

    public JsFunc<Void> foo13(long arg0, double arg1, Date arg2){
        return call("foo13").with(arg0, arg1, arg2);
    }

    public JsFunc<Void> foo13(IValueBinding<Long> arg0, IValueBinding<Double> arg1, IValueBinding<? extends Date> arg2, 
            org.eclipse.vjet.vsf.jsref.d.D1... notUsed){
        return call("foo13").with(arg0, arg1, arg2);
    }

    public JsFunc<Void> foo13(float arg0, double arg1, Date arg2){
        return call("foo13").with(arg0, arg1, arg2);
    }

    public JsFunc<Void> foo13(IValueBinding<Float> arg0, IValueBinding<Double> arg1, IValueBinding<? extends Date> arg2, 
            org.eclipse.vjet.vsf.jsref.d.D2... notUsed){
        return call("foo13").with(arg0, arg1, arg2);
    }

    public JsFunc<Void> foo13(int arg0, String arg1, Date arg2){
        return call("foo13").with(arg0, arg1, arg2);
    }

    public JsFunc<Void> foo13(IValueBinding<Integer> arg0, IValueBinding<String> arg1, IValueBinding<? extends Date> arg2, 
            org.eclipse.vjet.vsf.jsref.d.D3... notUsed){
        return call("foo13").with(arg0, arg1, arg2);
    }

    public JsFunc<Void> foo13(long arg0, String arg1, Date arg2){
        return call("foo13").with(arg0, arg1, arg2);
    }

    public JsFunc<Void> foo13(IValueBinding<Long> arg0, IValueBinding<String> arg1, IValueBinding<? extends Date> arg2, 
            org.eclipse.vjet.vsf.jsref.d.D4... notUsed){
        return call("foo13").with(arg0, arg1, arg2);
    }

    public JsFunc<Void> foo13(float arg0, String arg1, Date arg2){
        return call("foo13").with(arg0, arg1, arg2);
    }

    public JsFunc<Void> foo13(IValueBinding<Float> arg0, IValueBinding<String> arg1, IValueBinding<? extends Date> arg2, 
            org.eclipse.vjet.vsf.jsref.d.D5... notUsed){
        return call("foo13").with(arg0, arg1, arg2);
    }
    
    public static JsTypeRef<CTypeMultipleArgs13Jsr> prototype = new JsTypeRef<CTypeMultipleArgs13Jsr>(S);
}
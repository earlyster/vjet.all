package org.eclipse.vjet.dsf.jstojava.codegen.data;

import org.eclipse.vjet.vsf.jsref.JsFunc;
import org.eclipse.vjet.dsf.common.binding.IValueBinding;
import org.eclipse.vjet.vsf.jsref.JsObj;
import org.eclipse.vjet.vsf.jsref.internals.JsCmpMeta;
import org.eclipse.vjet.vsf.jsref.JsTypeRef;
import org.eclipse.vjet.vsf.jsref.JsObjData;
import org.eclipse.vjet.dsf.spec.component.IComponentSpec;
import org.eclipse.vjet.vsf.resource.pattern.js.JsResource;
import org.eclipse.vjet.vsf.resource.pattern.js.IJsResourceRef;

@org.eclipse.vjet.dsf.resource.utils.CodeGen("JsrGenerator")
public class MethodsMultiTypeJsr extends JsObj {
    private static final long serialVersionUID = 1L;

    private static final JsObjData S = 
        new JsObjData("org.eclipse.vjet.dsf.jstojava.codegen.data.MethodsMultiType", MethodsMultiTypeJsr.class, "MethodsMultiType");

    
    public static class ResourceSpec {
        public static IComponentSpec getInstance() {
            return S.getResourceSpec(); 
        }
        public static final JsResource RESOURCE = S.getJsResource();
        public static final IJsResourceRef REF = S.getJsResourceRef();
    }

    public static final IComponentSpec SPEC = S.getResourceSpec();

    public MethodsMultiTypeJsr(){
        super(S.getJsCmpMeta(), true);
    }

    protected MethodsMultiTypeJsr(JsCmpMeta cmpMeta, boolean isInstance, Object... args) {
        super(cmpMeta, isInstance, args);
    }

    public static JsFunc<Void> hasMultiTypeParamStatic(String pParam1, boolean pParam2, String pParam3, String pParam4){
        return call(S, "hasMultiTypeParamStatic").with(pParam1, pParam2, pParam3, pParam4);
    }

    public static JsFunc<Void> hasMultiTypeParamStatic(IValueBinding<String> pParam1, IValueBinding<Boolean> pParam2, IValueBinding<String> pParam3, IValueBinding<String> pParam4){
        return call(S, "hasMultiTypeParamStatic").with(pParam1, pParam2, pParam3, pParam4);
    }

    public static JsFunc<Void> hasMultiTypeParamStatic(String pParam1, String pParam2, String pParam3, String pParam4){
        return call(S, "hasMultiTypeParamStatic").with(pParam1, pParam2, pParam3, pParam4);
    }

    public static JsFunc<Void> hasMultiTypeParamStatic(IValueBinding<String> pParam1, IValueBinding<String> pParam2, IValueBinding<String> pParam3, IValueBinding<String> pParam4, 
            org.eclipse.vjet.vsf.jsref.d.D1... notUsed){
        return call(S, "hasMultiTypeParamStatic").with(pParam1, pParam2, pParam3, pParam4);
    }

    public static JsFunc<Void> hasMultiTypeParamStatic(char pParam1, boolean pParam2, String pParam3, String pParam4){
        return call(S, "hasMultiTypeParamStatic").with(pParam1, pParam2, pParam3, pParam4);
    }

    public static JsFunc<Void> hasMultiTypeParamStatic(IValueBinding<Character> pParam1, IValueBinding<Boolean> pParam2, IValueBinding<String> pParam3, IValueBinding<String> pParam4, 
            org.eclipse.vjet.vsf.jsref.d.D2... notUsed){
        return call(S, "hasMultiTypeParamStatic").with(pParam1, pParam2, pParam3, pParam4);
    }

    public static JsFunc<Void> hasMultiTypeParamStatic(char pParam1, String pParam2, String pParam3, String pParam4){
        return call(S, "hasMultiTypeParamStatic").with(pParam1, pParam2, pParam3, pParam4);
    }

    public static JsFunc<Void> hasMultiTypeParamStatic(IValueBinding<Character> pParam1, IValueBinding<String> pParam2, IValueBinding<String> pParam3, IValueBinding<String> pParam4, 
            org.eclipse.vjet.vsf.jsref.d.D3... notUsed){
        return call(S, "hasMultiTypeParamStatic").with(pParam1, pParam2, pParam3, pParam4);
    }

    public JsFunc<Void> hasMultiTypeParam(int pParam1, char pParam2){
        return call("hasMultiTypeParam").with(pParam1, pParam2);
    }

    public JsFunc<Void> hasMultiTypeParam(IValueBinding<Integer> pParam1, IValueBinding<Character> pParam2){
        return call("hasMultiTypeParam").with(pParam1, pParam2);
    }

    public JsFunc<Void> hasMultiTypeParam(int pParam1, int pParam2){
        return call("hasMultiTypeParam").with(pParam1, pParam2);
    }

    public JsFunc<Void> hasMultiTypeParam(IValueBinding<Integer> pParam1, IValueBinding<Integer> pParam2, 
            org.eclipse.vjet.vsf.jsref.d.D1... notUsed){
        return call("hasMultiTypeParam").with(pParam1, pParam2);
    }

    public JsFunc<Void> hasMultiTypeParam(String pParam1, char pParam2){
        return call("hasMultiTypeParam").with(pParam1, pParam2);
    }

    public JsFunc<Void> hasMultiTypeParam(IValueBinding<String> pParam1, IValueBinding<Character> pParam2, 
            org.eclipse.vjet.vsf.jsref.d.D2... notUsed){
        return call("hasMultiTypeParam").with(pParam1, pParam2);
    }

    public JsFunc<Void> hasMultiTypeParam(String pParam1, int pParam2){
        return call("hasMultiTypeParam").with(pParam1, pParam2);
    }

    public JsFunc<Void> hasMultiTypeParam(IValueBinding<String> pParam1, IValueBinding<Integer> pParam2, 
            org.eclipse.vjet.vsf.jsref.d.D3... notUsed){
        return call("hasMultiTypeParam").with(pParam1, pParam2);
    }

    public JsFunc<Void> hasMultiTypeParam(Long pParam1, char pParam2){
        return call("hasMultiTypeParam").with(pParam1, pParam2);
    }

    public JsFunc<Void> hasMultiTypeParam(IValueBinding<Long> pParam1, IValueBinding<Character> pParam2, 
            org.eclipse.vjet.vsf.jsref.d.D4... notUsed){
        return call("hasMultiTypeParam").with(pParam1, pParam2);
    }

    public JsFunc<Void> hasMultiTypeParam(Long pParam1, int pParam2){
        return call("hasMultiTypeParam").with(pParam1, pParam2);
    }

    public JsFunc<Void> hasMultiTypeParam(IValueBinding<Long> pParam1, IValueBinding<Integer> pParam2, 
            org.eclipse.vjet.vsf.jsref.d.D5... notUsed){
        return call("hasMultiTypeParam").with(pParam1, pParam2);
    }
    
    public static JsTypeRef<MethodsMultiTypeJsr> prototype = new JsTypeRef<MethodsMultiTypeJsr>(S);
}
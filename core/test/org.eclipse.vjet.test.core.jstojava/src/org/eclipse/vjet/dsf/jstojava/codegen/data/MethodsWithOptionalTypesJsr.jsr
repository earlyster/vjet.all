package org.eclipse.vjet.dsf.jstojava.codegen.data;

import org.eclipse.vjet.vsf.jsref.JsFunc;
import org.eclipse.vjet.dsf.common.binding.IValueBinding;
import org.eclipse.vjet.vsf.jsref.JsObj;
import org.eclipse.vjet.vsf.jsref.internals.JsCmpMeta;
import org.eclipse.vjet.vsf.jsref.JsTypeRef;
import org.eclipse.vjet.vsf.jsref.JsObjData;
import org.eclipse.vjet.dsf.spec.component.IComponentSpec;
import org.eclipse.vjet.vsf.resource.pattern.js.JsResource;
import org.eclipse.vjet.vsf.resource.pattern.js.IJsResourceRef;

@org.eclipse.vjet.dsf.resource.utils.CodeGen("JsrGenerator")
public class MethodsWithOptionalTypesJsr extends JsObj {
    private static final long serialVersionUID = 1L;

    private static final JsObjData S = 
        new JsObjData("org.eclipse.vjet.dsf.jstojava.codegen.data.MethodsWithOptionalTypes", MethodsWithOptionalTypesJsr.class, "MethodsWithOptionalTypes");

    
    public static class ResourceSpec {
        public static IComponentSpec getInstance() {
            return S.getResourceSpec(); 
        }
        public static final JsResource RESOURCE = S.getJsResource();
        public static final IJsResourceRef REF = S.getJsResourceRef();
    }

    public static final IComponentSpec SPEC = S.getResourceSpec();

    public MethodsWithOptionalTypesJsr(){
        super(S.getJsCmpMeta(), true);
    }

    protected MethodsWithOptionalTypesJsr(JsCmpMeta cmpMeta, boolean isInstance, Object... args) {
        super(cmpMeta, isInstance, args);
    }

    public static JsFunc<Void> hasOptionalParamStatic(boolean pParam2, String pParam3, String pParam4){
        return call(S, "hasOptionalParamStatic").with(pParam2, pParam3, pParam4);
    }

    public static JsFunc<Void> hasOptionalParamStatic(IValueBinding<Boolean> pParam2, IValueBinding<String> pParam3, IValueBinding<String> pParam4){
        return call(S, "hasOptionalParamStatic").with(pParam2, pParam3, pParam4);
    }

    public static JsFunc<Void> hasOptionalParamStatic(String pParam2, String pParam3, String pParam4){
        return call(S, "hasOptionalParamStatic").with(pParam2, pParam3, pParam4);
    }

    public static JsFunc<Void> hasOptionalParamStatic(IValueBinding<String> pParam2, IValueBinding<String> pParam3, IValueBinding<String> pParam4, 
            org.eclipse.vjet.vsf.jsref.d.D1... notUsed){
        return call(S, "hasOptionalParamStatic").with(pParam2, pParam3, pParam4);
    }

    public static JsFunc<Void> hasOptionalParamStatic(boolean pParam2, String pParam3){
        return call(S, "hasOptionalParamStatic").with(pParam2, pParam3);
    }

    public static JsFunc<Void> hasOptionalParamStatic(IValueBinding<Boolean> pParam2, IValueBinding<String> pParam3){
        return call(S, "hasOptionalParamStatic").with(pParam2, pParam3);
    }

    public static JsFunc<Void> hasOptionalParamStatic(boolean pParam2){
        return call(S, "hasOptionalParamStatic").with(pParam2);
    }

    public static JsFunc<Void> hasOptionalParamStatic(IValueBinding<Boolean> pParam2){
        return call(S, "hasOptionalParamStatic").with(pParam2);
    }

    public static JsFunc<Void> hasOptionalParamStatic(){
        return call(S, "hasOptionalParamStatic");
    }

    public static JsFunc<Void> hasOptionalParamStatic(String pParam2, String pParam3){
        return call(S, "hasOptionalParamStatic").with(pParam2, pParam3);
    }

    public static JsFunc<Void> hasOptionalParamStatic(IValueBinding<String> pParam2, IValueBinding<String> pParam3, 
            org.eclipse.vjet.vsf.jsref.d.D1... notUsed){
        return call(S, "hasOptionalParamStatic").with(pParam2, pParam3);
    }

    public static JsFunc<Void> hasOptionalParamStatic(String pParam2){
        return call(S, "hasOptionalParamStatic").with(pParam2);
    }

    public static JsFunc<Void> hasOptionalParamStatic(IValueBinding<String> pParam2, 
            org.eclipse.vjet.vsf.jsref.d.D1... notUsed){
        return call(S, "hasOptionalParamStatic").with(pParam2);
    }

    public JsFunc<Void> hasOptionalParam(int pParam){
        return call("hasOptionalParam").with(pParam);
    }

    public JsFunc<Void> hasOptionalParam(IValueBinding<Integer> pParam){
        return call("hasOptionalParam").with(pParam);
    }

    public JsFunc<Void> hasOptionalParam(){
        return call("hasOptionalParam");
    }
    
    public static JsTypeRef<MethodsWithOptionalTypesJsr> prototype = new JsTypeRef<MethodsWithOptionalTypesJsr>(S);
}
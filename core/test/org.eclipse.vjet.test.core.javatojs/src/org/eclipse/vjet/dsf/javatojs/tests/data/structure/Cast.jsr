package org.eclipse.vjet.dsf.javatojs.tests.data.structure;

import org.eclipse.vjet.vsf.jsref.JsFunc;
import org.eclipse.vjet.dsf.common.binding.IValueBinding;
import org.eclipse.vjet.vsf.jsref.JsObj;
import org.eclipse.vjet.vsf.jsref.internals.JsCmpMeta;
import org.eclipse.vjet.vsf.jsref.JsTypeRef;
import org.eclipse.vjet.vsf.jsref.JsObjData;
import org.eclipse.vjet.dsf.spec.component.IComponentSpec;
import org.eclipse.vjet.vsf.resource.pattern.js.JsResource;
import org.eclipse.vjet.vsf.resource.pattern.js.IJsResourceRef;
import org.eclipse.vjet.vjo.java.lang.LongJsr;
import org.eclipse.vjet.vjo.java.lang.UtilJsr;

@org.eclipse.vjet.dsf.resource.utils.CodeGen("JsrGenerator")
public class CastJsr extends JsObj {
    private static final long serialVersionUID = 1L;

    private static final JsObjData S = 
        new JsObjData("org.eclipse.vjet.dsf.javatojs.tests.data.structure.Cast", CastJsr.class, "Cast", true);

    
    public static class ResourceSpec {
        public static IComponentSpec getInstance() {
            return S.getResourceSpec(); 
        }
        public static final JsResource RESOURCE = S.getJsResource();
        public static final IJsResourceRef REF = S.getJsResourceRef();
    }

    public static final IComponentSpec SPEC = S.getResourceSpec()
        .addDependentComponent(LongJsr.ResourceSpec.getInstance())
        .addDependentComponent(UtilJsr.ResourceSpec.getInstance());

    public CastJsr(){
        super(S.getJsCmpMeta(), true);
    }

    protected CastJsr(JsCmpMeta cmpMeta, boolean isInstance, Object... args) {
        super(cmpMeta, isInstance, args);
    }

    public JsFunc<Integer> getIntValue(long lValue){
        return call(Integer.class, "getIntValue").with(lValue);
    }

    public JsFunc<Integer> getIntValue(IValueBinding<Long> lValue){
        return call(Integer.class, "getIntValue").with(lValue);
    }

    public JsFunc<Long> getLongValue(int lValue){
        return call(Long.class, "getLongValue").with(lValue);
    }

    public JsFunc<Long> getLongValue(IValueBinding<Integer> lValue){
        return call(Long.class, "getLongValue").with(lValue);
    }

    public JsFunc<String> getStringValue(Object oValue){
        return call(String.class, "getStringValue").with(oValue);
    }
    
    public static JsTypeRef<CastJsr> prototype = new JsTypeRef<CastJsr>(S);
}
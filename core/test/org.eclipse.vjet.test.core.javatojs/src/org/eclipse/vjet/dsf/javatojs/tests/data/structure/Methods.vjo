/* @org.eclipse.vjet.dsf.resource.utils.CodeGen("VjoGenerator") */
vjo.ctype('org.eclipse.vjet.dsf.javatojs.tests.data.structure.Methods') //< public
.props({
    TypeA:vjo.ctype() //< public
    .props({
        //> public String getBase()
        getBase:function(){
            return "Base";
        }
    })
    .protos({
        m_name:null, //< private String
        //> public constructs(final String name)
        constructs:function(name){
            this.m_name=name;
        },
        //> public String getName()
        getName:function(){
            return this.m_name;
        },
        //> public String getNameA()
        getNameA:function(){
            return this.m_name;
        }
    })
    .endType(),
    TypeB:vjo.ctype() //< public
    .inherits('org.eclipse.vjet.dsf.javatojs.tests.data.structure.Methods.TypeA')
    .props({
        //> private String getPostfix()
        getPostfix:function(){
            return ".java";
        }
    })
    .protos({
        //> public constructs(final String name)
        constructs:function(name){
            this.base(name);
        },
        //> public String getName()
        getName:function(){
            var name=this.vj$.Methods.TypeA.getBase()+this.vj$.Methods.TypeA.getBase()+this.getNameA()+this.base.getName(); //<String
            name+=this.getPrefix()+this.getPrefix()+this.vj$.TypeB.getPostfix()+this.vj$.TypeB.getPostfix();
            return name;
        },
        //> private String getPrefix()
        getPrefix:function(){
            return "B";
        }
    })
    .endType(),
    //> public void main(String[] args)
    main:function(args){
        var mtd=new this(); //<Methods
        mtd.varargs("Std","a","b","c");
    }
})
.protos({
    //> final public boolean varargs(String std,String... titles)
    varargs:function(std){
        var titles;
        if (arguments.length == 2 && arguments[1]  instanceof Array){
            titles=arguments[1];
        }
        else {
            titles=[];
            for (var i=1; i<arguments.length; i++){
                titles[i-1]=arguments[i];
            }
        }
        if(titles.length>0){
            titles[0]=std;
            return true;
        }
        return false;
    }
})
.endType();
package org.eclipse.vjet.dsf.javatojs.tests.data.structure;

import org.eclipse.vjet.vsf.jsref.JsFunc;
import org.eclipse.vjet.dsf.common.binding.IValueBinding;
import org.eclipse.vjet.vsf.jsref.JsObj;
import org.eclipse.vjet.vsf.jsref.JsProp;
import org.eclipse.vjet.vsf.jsref.internals.JsCmpMeta;
import org.eclipse.vjet.vsf.jsref.JsTypeRef;
import org.eclipse.vjet.vsf.jsref.JsObjData;
import org.eclipse.vjet.dsf.spec.component.IComponentSpec;
import org.eclipse.vjet.vsf.resource.pattern.js.JsResource;
import org.eclipse.vjet.vsf.resource.pattern.js.IJsResourceRef;
import org.eclipse.vjet.dsf.javatojs.tests.data.IHandlerJsr;

@org.eclipse.vjet.dsf.resource.utils.CodeGen("JsrGenerator")
public interface InterfaceJsr extends IHandlerJsr {
    JsObjData S = 
        new JsObjData("org.eclipse.vjet.dsf.javatojs.tests.data.structure.Interface", InterfaceJsr.class, "Interface", true);

    
    public static class ResourceSpec {
        public static IComponentSpec getInstance() {
            return S.getResourceSpec(); 
        }
        public static final JsResource RESOURCE = S.getJsResource();
        public static final IJsResourceRef REF = S.getJsResourceRef();
    }

    public static final IComponentSpec SPEC = S.getResourceSpec()
        .addDependentComponent(IHandlerJsr.ResourceSpec.getInstance());

    public static final class PROPS{
        public static final JsProp<String> PREFIX(){
            return new JsProp<String>(S.getStaticAnchor(), "PREFIX");
        }
    public static final JsProp<String> POSTFIX(){
            return new JsProp<String>(S.getStaticAnchor(), "POSTFIX");
        }
    }

    public JsFunc<Boolean> handle2();

    public JsFunc<Integer> total();

    public abstract class BaseJsr extends JsObj implements InterfaceJsr {
        private static final long serialVersionUID = 1L;


        public BaseJsr(){
            super(S.getJsCmpMeta(), true);
        }

        protected BaseJsr(JsCmpMeta cmpMeta, boolean isInstance, Object... args) {
            super(cmpMeta, isInstance, args);
        }

        public JsFunc<Boolean> handle2(){
            return call(Boolean.class, "handle2");
        }
        
        public static JsTypeRef<BaseJsr> prototype = new JsTypeRef<BaseJsr>(S);
    }
    public class DefaultJsr extends BaseJsr implements InterfaceJsr {
        private static final long serialVersionUID = 1L;


        public DefaultJsr(){
            super(S.getJsCmpMeta(), true);
        }

        protected DefaultJsr(JsCmpMeta cmpMeta, boolean isInstance, Object... args) {
            super(cmpMeta, isInstance, args);
        }

        public JsFunc<Boolean> handle2(){
            return call(Boolean.class, "handle2");
        }

        public JsFunc<Boolean> handle(boolean debug){
            return call(Boolean.class, "handle").with(debug);
        }

        public JsFunc<Boolean> handle(IValueBinding<Boolean> debug){
            return call(Boolean.class, "handle").with(check(debug));
        }

        public JsFunc<Integer> total(){
            return call(Integer.class, "total");
        }
        
        public static JsTypeRef<DefaultJsr> prototype = new JsTypeRef<DefaultJsr>(S);
    }
    
    public static JsTypeRef<InterfaceJsr> prototype = new JsTypeRef<InterfaceJsr>(S);
}
package org.eclipse.vjet.dsf.javatojs.tests.data.structure;

import org.eclipse.vjet.vsf.jsref.JsFunc;
import org.eclipse.vjet.dsf.common.binding.IValueBinding;
import org.eclipse.vjet.vsf.jsref.JsObj;
import org.eclipse.vjet.vsf.jsref.internals.JsCmpMeta;
import org.eclipse.vjet.vsf.jsref.JsTypeRef;
import org.eclipse.vjet.vsf.jsref.JsObjData;
import org.eclipse.vjet.dsf.spec.component.IComponentSpec;
import org.eclipse.vjet.vsf.resource.pattern.js.JsResource;
import org.eclipse.vjet.vsf.resource.pattern.js.IJsResourceRef;
import org.eclipse.vjet.dsf.javatojs.tests.data.SuperJsr;
import org.eclipse.vjet.dsf.javatojs.tests.data.structure.MethodsJsr;

@org.eclipse.vjet.dsf.resource.utils.CodeGen("JsrGenerator")
public class NestedTypesJsr extends SuperJsr {
    private static final long serialVersionUID = 1L;

    private static final JsObjData S = 
        new JsObjData("org.eclipse.vjet.dsf.javatojs.tests.data.structure.NestedTypes", NestedTypesJsr.class, "NestedTypes", true);

    
    public static class ResourceSpec {
        public static IComponentSpec getInstance() {
            return S.getResourceSpec(); 
        }
        public static final JsResource RESOURCE = S.getJsResource();
        public static final IJsResourceRef REF = S.getJsResourceRef();
    }

    public static final IComponentSpec SPEC = S.getResourceSpec()
        .addDependentComponent(SuperJsr.ResourceSpec.getInstance())
        .addDependentComponent(MethodsJsr.ResourceSpec.getInstance());

    public NestedTypesJsr(){
        super(S.getJsCmpMeta(), true);
    }

    protected NestedTypesJsr(JsCmpMeta cmpMeta, boolean isInstance, Object... args) {
        super(cmpMeta, isInstance, args);
    }

    public static JsFunc<Void> main(String[] args){
        return call(S, "main").with((Object)args);
    }

    public static JsFunc<Void> main(IValueBinding<String[]> args){
        return call(S, "main").with(args);
    }

    public JsFunc<String> getGroup(){
        return call(String.class, "getGroup");
    }

    public static class TypeBJsr extends NestedTypesJsr {
        private static final long serialVersionUID = 1L;

        private static final JsObjData S = 
            new JsObjData("org.eclipse.vjet.dsf.javatojs.tests.data.structure.NestedTypes.TypeB", TypeBJsr.class, "NestedTypes");

        public TypeBJsr(){
            super(S.getJsCmpMeta(), true);
        }

        protected TypeBJsr(JsCmpMeta cmpMeta, boolean isInstance, Object... args) {
            super(cmpMeta, isInstance, args);
        }

        public JsFunc<String> getB(){
            return call(String.class, "getB");
        }
        
        public static JsTypeRef<TypeBJsr> prototype = new JsTypeRef<TypeBJsr>(S);
    }
    public static class TypeCJsr extends JsObj {
        private static final long serialVersionUID = 1L;

        private static final JsObjData S = 
            new JsObjData("org.eclipse.vjet.dsf.javatojs.tests.data.structure.NestedTypes.TypeC", TypeCJsr.class, "NestedTypes");

        public TypeCJsr(){
            super(S.getJsCmpMeta(), true);
        }

        protected TypeCJsr(JsCmpMeta cmpMeta, boolean isInstance, Object... args) {
            super(cmpMeta, isInstance, args);
        }

        public JsFunc<String> getC(){
            return call(String.class, "getC");
        }
        
        public static JsTypeRef<TypeCJsr> prototype = new JsTypeRef<TypeCJsr>(S);
    }
    public class TypeDJsr extends TypeCJsr {
        private static final long serialVersionUID = 1L;


        public TypeDJsr(){
            super(S.getJsCmpMeta(), true);
        }

        protected TypeDJsr(JsCmpMeta cmpMeta, boolean isInstance, Object... args) {
            super(cmpMeta, isInstance, args);
        }

        public JsFunc<String> getD(){
            return call(String.class, "getD");
        }
    }
    
    public static JsTypeRef<NestedTypesJsr> prototype = new JsTypeRef<NestedTypesJsr>(S);
}
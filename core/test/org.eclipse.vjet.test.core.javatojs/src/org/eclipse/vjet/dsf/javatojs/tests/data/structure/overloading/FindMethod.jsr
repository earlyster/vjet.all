package org.eclipse.vjet.dsf.javatojs.tests.data.structure.overloading;

import org.eclipse.vjet.vsf.jsref.JsFunc;
import org.eclipse.vjet.dsf.common.binding.IValueBinding;
import org.eclipse.vjet.vsf.jsref.JsObj;
import org.eclipse.vjet.vsf.jsref.internals.JsCmpMeta;
import org.eclipse.vjet.vsf.jsref.JsTypeRef;
import org.eclipse.vjet.vsf.jsref.JsObjData;
import org.eclipse.vjet.dsf.spec.component.IComponentSpec;
import org.eclipse.vjet.vsf.resource.pattern.js.JsResource;
import org.eclipse.vjet.vsf.resource.pattern.js.IJsResourceRef;
import org.eclipse.vjet.vjo.java.lang.IntegerJsr;
import org.eclipse.vjet.vjo.java.lang.LongJsr;

@org.eclipse.vjet.dsf.resource.utils.CodeGen("JsrGenerator")
public class FindMethodJsr extends JsObj {
    private static final long serialVersionUID = 1L;

    private static final JsObjData S = 
        new JsObjData("org.eclipse.vjet.dsf.javatojs.tests.data.structure.overloading.FindMethod", FindMethodJsr.class, "FindMethod", true);

    
    public static class ResourceSpec {
        public static IComponentSpec getInstance() {
            return S.getResourceSpec(); 
        }
        public static final JsResource RESOURCE = S.getJsResource();
        public static final IJsResourceRef REF = S.getJsResourceRef();
    }

    public static final IComponentSpec SPEC = S.getResourceSpec()
        .addDependentComponent(IntegerJsr.ResourceSpec.getInstance())
        .addDependentComponent(LongJsr.ResourceSpec.getInstance());

    public FindMethodJsr(){
        super(S.getJsCmpMeta(), true);
    }

    protected FindMethodJsr(JsCmpMeta cmpMeta, boolean isInstance, Object... args) {
        super(cmpMeta, isInstance, args);
    }

    public static JsFunc<Void> invoke(){
        return call(S, "invoke");
    }

    public JsFunc<Void> foo(IntegerJsr x, long y){
        return call("foo").with(x, y);
    }

    public JsFunc<Void> foo(IValueBinding<? extends IntegerJsr> x, IValueBinding<Long> y){
        return call("foo").with(x, y);
    }

    public JsFunc<Void> foo(int x, LongJsr y){
        return call("foo").with(x, y);
    }

    public JsFunc<Void> foo(IValueBinding<Integer> x, IValueBinding<? extends LongJsr> y, 
            org.eclipse.vjet.vsf.jsref.d.D1... notUsed){
        return call("foo").with(x, y);
    }
    
    public static JsTypeRef<FindMethodJsr> prototype = new JsTypeRef<FindMethodJsr>(S);
}
package org.eclipse.vjet.dsf.javatojs.tests.data.structure;

import org.eclipse.vjet.vsf.jsref.JsFunc;
import org.eclipse.vjet.dsf.common.binding.IValueBinding;
import org.eclipse.vjet.vsf.jsref.internals.JsCmpMeta;
import org.eclipse.vjet.vsf.jsref.JsTypeRef;
import org.eclipse.vjet.vsf.jsref.JsObjData;
import org.eclipse.vjet.dsf.spec.component.IComponentSpec;
import org.eclipse.vjet.vsf.resource.pattern.js.JsResource;
import org.eclipse.vjet.vsf.resource.pattern.js.IJsResourceRef;
import org.eclipse.vjet.dsf.javatojs.tests.data.PersonJsr;

@org.eclipse.vjet.dsf.resource.utils.CodeGen("JsrGenerator")
public class IdentifiersJsr extends PersonJsr {
    private static final long serialVersionUID = 1L;

    private static final JsObjData S = 
        new JsObjData("org.eclipse.vjet.dsf.javatojs.tests.data.structure.Identifiers", IdentifiersJsr.class, "Identifiers", true);

    
    public static class ResourceSpec {
        public static IComponentSpec getInstance() {
            return S.getResourceSpec(); 
        }
        public static final JsResource RESOURCE = S.getJsResource();
        public static final IJsResourceRef REF = S.getJsResourceRef();
    }

    public static final IComponentSpec SPEC = S.getResourceSpec()
        .addDependentComponent(PersonJsr.ResourceSpec.getInstance());

    public IdentifiersJsr(){
        super(S.getJsCmpMeta(), true);
    }

    protected IdentifiersJsr(JsCmpMeta cmpMeta, boolean isInstance, Object... args) {
        super(cmpMeta, isInstance, args);
    }

    public JsFunc<Void> qualifiedNames(){
        return call("qualifiedNames");
    }

    public JsFunc<Void> fieldAccess(String name){
        return call("fieldAccess").with(name);
    }

    public JsFunc<Void> fieldAccess(IValueBinding<String> name){
        return call("fieldAccess").with(name);
    }

    public JsFunc<Void> setAge(int age){
        return call("setAge").with(age);
    }

    public JsFunc<Void> setAge(IValueBinding<Integer> age){
        return call("setAge").with(age);
    }
    
    public static JsTypeRef<IdentifiersJsr> prototype = new JsTypeRef<IdentifiersJsr>(S);
}
Code Status:
	
	1. Syntax for declaring VJO MetaDataType is ready, it is same as regular VJo type declaration
	
	2. VjBootstrap will take care of identifying namespace of VjoMetaType for any vjo type.
		(i.e for type com.ebay.vjo.A , meta type will be com.ebay.vjo.A__rtti )
		
	3. Since Building and packaging metchanism for MetaInfo is no ready , we need to explicitly 
	   register it to meta registry with code structure mentioned below,
	   ************************* Code Sample **************************
		vjo.meta.load('com.ebay.vjo.runtime.tests.metatype.testData.TestDataA', 
			function () {
				var d = 
				{
					type : ['com.ebay.vjo.runtime.tests.metatype.testData.TestDataA', 0x00000001],
					
					fields : [
						['str', 'String', 0x00000002],
						['self', 'com.ebay.vjo.runtime.tests.metatype.testData.TestDataA', 0x00000002]
					],
					methods : [
						['foo', [], 'void', 0x00000001],
						['bar', [], 'Class', 0x00000001],
						['test', [], 'com.ebay.vjo.runtime.tests.metatype.testData..TestDataB', 0x00000001]
					],
					
					constructors : [
						[[], 0x00000001],
						[['String', 'Integer'], 0x00000001]
					]
				};
				return d;
			}
		); 
	  ****************************************************************
	
	4. Currently only following of features are implemented in vjo.Class , which use VjoMetaData.
			1. getConstructors 
			2. getFields 
			3. getDeclaredFields 
			4. getMethods 
			5. getDeclaredMethods 
			6. getModifiers 
			7. getAnnotations [pushed out of scope in meeting with Sathish, Raja and Makarand] 
			8. getInterfaces [pushed out of scope in meeting with Sathish, Raja and Makarand]
	        9. getVjoType [pushed out of scope in meeting with Sathish, Raja and Makarand]
	
	5. Following are the ways of getting class in VJO , and their implementation status .
	        1. Getting class from Object (Implemented)
	        	i.e. obj.getClass() 
	        		- this will return instance of vjo.Class for Type of the object.
    	    2. Getting class Type's local namespace 
    	    	i.e this.vj$.Foo.clazz 
    	    		- this will return instance of vjo.Class for invoking type.
        	3. Getting class Type's global namespace 
        		i.e com.ebay.vjo.runtime.tests.metatype.testData.TestDataA.clazz
        			 - this will return instance of vjo.Class for invoking type.
        		
	6. Though not unit test is not provided , sample code that explains basic testing approach 
	   is available in clearcase. 
	   Location : VIEW_DIR\v4samplecode\V4DeCode\src\test\v4\vjo\rt\rtti 
	 
Available Documentation :

	1. VIEW_DIR\ebayv3docs\V4\JS\VjOMetaType.doc
	2. VIEW_DIR\ebayv3docs\V4\JS\VjOClass.doc	 
	 
Testing Plan & Scope [Inclusions]
	
	1. Test api in vjo.Class which uses VjoMetaData  (see 'Code Status#4') 
	2. Exercise and test different ways of getting class in VJO.
	3. Test lazy loading of VjoMetadata.
	4. Validate VjoBootstrap's capability of handling bootstrapping order by 
	   exercising different ways of accessing class without declaring in needs.
	5. Validate that class for any type is following singleton pattern and each 
	   reference to vjo.Class of a particular type points to same object of 
	   Vjo.Class.
	6. Also need to test following API
			1. vjo.reflect.Constructor
			2. vjo.reflect.Method
			3. vjo.reflect.Field
			
Testing Plan & Scope [Exclusions]
	
		 Documents also describe about Building & Serialization needs of VjoMetadata but those are excluded
		 from testing scope because those are not implemented and are not planned
		 to be implemented in this release  

Testing Approach

	Since this is testing of VjoRuntime , 
		1. separate test project should  be created which depends only on 
		   testing Target Project and Junit libraries.
		   i.e Project Name : VjoRuntimeTests

		   	   ************************* Project.xml **************************
		   	   <project type="JAR" path="v4darwin" isTest="true" testClass="com.ebay.vjo.runtime.tests.AllRuntimeTests">
					<src>
						<dir path="src"/>
					</src>
					<dependencies>
						<project name="VjoRuntime"/>
						<project name="JUnitNexGen" />
						<project name="VjoJavaLib" />
					</dependencies>
				</project>
		   	   ****************************************************************
		
		2. Since tests need to to be written in VJO , test project should 
		   have additional dependency on v4darwin\VjoJavaLib project  
		 
		3. Use Test Case categorization and let tests run against MS-IE and FireFox.
		
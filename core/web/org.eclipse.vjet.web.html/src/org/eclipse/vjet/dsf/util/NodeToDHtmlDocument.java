/*******************************************************************************
 * Copyright (c) 2005, 2012 eBay Inc.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
package org.eclipse.vjet.dsf.util;

import org.w3c.dom.Node;

import org.eclipse.vjet.dsf.html.dom.DArea;
import org.eclipse.vjet.dsf.html.dom.DBase;
import org.eclipse.vjet.dsf.html.dom.DBody;
import org.eclipse.vjet.dsf.html.dom.DCaption;
import org.eclipse.vjet.dsf.html.dom.DCol;
import org.eclipse.vjet.dsf.html.dom.DColGroup;
import org.eclipse.vjet.dsf.html.dom.DDd;
import org.eclipse.vjet.dsf.html.dom.DDel;
import org.eclipse.vjet.dsf.html.dom.DDl;
import org.eclipse.vjet.dsf.html.dom.DDt;
import org.eclipse.vjet.dsf.html.dom.DFieldSet;
import org.eclipse.vjet.dsf.html.dom.DForm;
import org.eclipse.vjet.dsf.html.dom.DFrame;
import org.eclipse.vjet.dsf.html.dom.DFrameSet;
import org.eclipse.vjet.dsf.html.dom.DHead;
import org.eclipse.vjet.dsf.html.dom.DHtml;
import org.eclipse.vjet.dsf.html.dom.DHtmlDocument;
import org.eclipse.vjet.dsf.html.dom.DLegend;
import org.eclipse.vjet.dsf.html.dom.DLi;
import org.eclipse.vjet.dsf.html.dom.DLink;
import org.eclipse.vjet.dsf.html.dom.DMap;
import org.eclipse.vjet.dsf.html.dom.DMeta;
import org.eclipse.vjet.dsf.html.dom.DNoFrames;
import org.eclipse.vjet.dsf.html.dom.DObject;
import org.eclipse.vjet.dsf.html.dom.DOl;
import org.eclipse.vjet.dsf.html.dom.DOptGroup;
import org.eclipse.vjet.dsf.html.dom.DOption;
import org.eclipse.vjet.dsf.html.dom.DParam;
import org.eclipse.vjet.dsf.html.dom.DSelect;
import org.eclipse.vjet.dsf.html.dom.DStyle;
import org.eclipse.vjet.dsf.html.dom.DTBody;
import org.eclipse.vjet.dsf.html.dom.DTFoot;
import org.eclipse.vjet.dsf.html.dom.DTHead;
import org.eclipse.vjet.dsf.html.dom.DTable;
import org.eclipse.vjet.dsf.html.dom.DTd;
import org.eclipse.vjet.dsf.html.dom.DTh;
import org.eclipse.vjet.dsf.html.dom.DTitle;
import org.eclipse.vjet.dsf.html.dom.DTr;
import org.eclipse.vjet.dsf.html.dom.IDFlow;
import org.eclipse.vjet.dsf.html.dom.IDFormControl;

public class NodeToDHtmlDocument {

	
	public static DHtmlDocument createHtmlDocumentContaining(Node component) {
		return createHtmlDocumentContaining(component, true);
	}

	/**
	 * The component can be any BaseHtmlElement and will end up being cloned 
	 * and properly parented so that a full DHtmlDocument results.  
	 */
	public static DHtmlDocument createHtmlDocumentContaining(Node component, boolean clone) {
		Node actualRoot = component;
		while (actualRoot.getParentNode() != null) {
			actualRoot = actualRoot.getParentNode();
		}
		
		DHtmlDocument doc = null;
		if (actualRoot instanceof DHtmlDocument) {
//			|| (actualRoot instanceof ISelfRender)) {
			doc = (DHtmlDocument) actualRoot;
			return doc ;
		}
		
		// Need to create document
		doc = new DHtmlDocument();
		
		// We clone to avoid any parenting/de-parenting issues.  It also 
		// makes sure we get our clone() right in all aspects.
		if(clone) {
//			actualRoot = actualRoot.cloneNode(true);
		}
		
		// If we have an HTML element it is added to the doc and displayed
		if (actualRoot instanceof DHtml) {
			doc.appendChild(actualRoot) ;
			return doc ;
		}
		
		// Create the HTML element since its missing at this point
		DHtml html = new DHtml();
		doc.appendChild(html) ;
	
		// if actualRoot is a DHead we parent and can display
		if (actualRoot instanceof DHead) {
			html.appendChild(actualRoot);
			return doc ;
		}

		// to be well-form HTML document we need a HEAD - we add it here
		DHead head = new DHead();
		html.add(head);
				
		// if the actualRoot is a DTitle we add it to head and emit
		if (actualRoot instanceof DTitle 
			|| actualRoot instanceof DBase
			|| actualRoot instanceof DLink
			|| actualRoot instanceof DMeta
			|| actualRoot instanceof DStyle)
		{
			head.appendChild(actualRoot) ;
			return doc ;
		}
		
		// We need a title in the head to be XHTML compliant
		DTitle title = new DTitle("Generated by V4");
		head.add(title);
		
		// if actualRoot is a BODY or FRAMESET we parent and can display
		if (actualRoot instanceof DBody || actualRoot instanceof DFrameSet) {
			html.appendChild(actualRoot);
			return doc ;
		}
		
		// Need to handle special case of Frame only being parentable by Frameset
		if (actualRoot instanceof DFrame || actualRoot instanceof DNoFrames) {
			DFrameSet fs = new DFrameSet() ;
			fs.appendChild(actualRoot) ;
			html.appendChild(fs) ;
			return doc ;
		}
		
		// At this point we have an element that must be further parented
		// to be hooked into the document.  We will assume that we are going
		// to add a BODY as that new attachment point.
		DBody body = new DBody();
		html.add(body);
		
		Node forBodyParenting =
			getSuitableForBodyParenting(actualRoot);
		
		body.appendChild(forBodyParenting);
		
		return doc ;
	}	
	
	
	private static Node getSuitableForBodyParenting(Node c) {
		if (c instanceof IDFormControl) {
			DForm form = new DForm() ;
			form.appendChild(c) ;
			return form ;
		}
		
		if (c instanceof DArea) {
			DMap map = new DMap() ;
			map.appendChild(c) ;
			return map ;
		}
		
		if (c instanceof DCaption || c instanceof DCol || c instanceof DColGroup) {
			DTable table = new DTable().setHtmlWidth("500").setHtmlBorder("3") ;
			table.appendChild(c) ;
			return table ;
		}
		
		if (c instanceof DDd) {
			DDt ddt = new DDt() ;
			ddt.appendChild(c) ;
			return ddt ;
		}
		
		if (c instanceof DLi) {
			DOl dol = new DOl();
			dol.setHtmlType(DLi.TYPE_1) ;
			dol.appendChild(c);
			return dol;
		}
		
		if (c instanceof DDt) {
			DDl ddl = new DDl() ;
			ddl.appendChild(c) ;
			return ddl ;
		}

		// A few more special cases like LEGEND who should be owned by a FIELDSET
		// who should be owned by a FORM
		if (c instanceof DLegend) {
			DForm form = new DForm() ;
			DFieldSet fieldset = new DFieldSet() ;
			form.appendChild(fieldset) ;
			fieldset.appendChild(c) ;
			return form ;
		}
				
		if (c instanceof DSelect) {
			DForm form = new DForm() ;
			form.appendChild(c) ;
			return form ;
		}
		
		if (c instanceof DOptGroup) {
			DForm form = new DForm() ;
			DSelect s = new DSelect() ;
			form.appendChild(s) ;
			s.appendChild(c) ;
			return form ;
		}
		
		if (c instanceof DOption) {
			DForm form = new DForm() ;
			DSelect s = new DSelect() ;
			DOptGroup g = new DOptGroup() ;
			form.appendChild(s) ;
			s.appendChild(g) ;
			g.appendChild(c) ;
			return form ;
		}		
		
		if (c instanceof DParam) {
			DObject object = new DObject() ;
			object.appendChild(c) ;
			return object ;
		}
		
		if (c instanceof DTBody || c instanceof DTHead || c instanceof DTFoot) {
			DTable table = new DTable() ;
			table.appendChild(c) ;
			return table ;
		}
		
		if (c instanceof DTr) {
			DTable table = new DTable().setHtmlBorder("3") ;
			table.appendChild(c) ;
			return table ;
		}
		
		if (c instanceof DTd || c instanceof DTh) {
			DTable table = new DTable().setHtmlBorder("3") ;
			DTr tr = new DTr() ;
			table.appendChild(tr) ;
			tr.appendChild(c) ;
			return table ;
		}
		
		/*
		We need to see if the passed in BaseHtmlElement can be directly
		parented by a BODY element.  The following is directly from the HTML DTD
		*/
		// <!ELEMENT BODY O O (%flow;)* +(INS|DEL) -- document body -->
		if (c instanceof IDFlow || c instanceof DDel) {
			return c;
		}
			
		// At this point we are neither meet nor cheese (Document or BaseHtmlElement)
		// We are then in the realm of DNode types...
		return c ;
			
//		throw new RuntimeException(
//			"Can't handle element: " + c.getClass().getName());
	}
	
}

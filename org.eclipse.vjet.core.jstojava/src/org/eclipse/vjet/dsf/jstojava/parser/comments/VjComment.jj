options {
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = true;
  STATIC = false;
  LOOKAHEAD = 2;
  FORCE_LA_CHECK=true;
}
PARSER_BEGIN(VjComment)

package org.eclipse.vjet.dsf.jstojava.parser.comments;
import java.io.ByteArrayInputStream;
import java.util.List;
import java.util.ArrayList;
import org.eclipse.vjet.dsf.jst.meta.JsType;
import org.eclipse.vjet.dsf.jst.meta.JsTypingMeta;
import org.eclipse.vjet.dsf.jst.meta.Token;
import org.eclipse.vjet.dsf.jst.meta.ArgType;

public class VjComment {

  public static JsCommentMeta parse(String comment) throws ParseException {
	String decl = CommentUtil.getDeclaration(comment);
	if (decl == null) {
		return null;
	}
	VjComment parser = new VjComment(new ByteArrayInputStream(decl.getBytes()));
	JsCommentMeta meta = new JsCommentMeta();	
	meta.setCommentSrc(comment);
	parser.parse(meta);
	return meta;
  }
}

PARSER_END(VjComment)

<DEFAULT> SKIP :
{
	" "
|	"\t"
}

<DEFAULT> TOKEN:
{
	<PUBLIC: "public" >
|	<PRIVATE: "private" >
|   <ATR : "\u0040">
|	<ANNOTATION : <ATR><LETTER> (<DIGIT> | <LETTER>)*>
|	<PROTECTED: "protected" >
|	<FINAL: "final" >
|	<STATIC: "static" >
|	<DYNAMIC: "dynamic" >
|	<NEEDS: "needs" >
|	<ALIASREF: "alias::" >
|	<TYPEREF: "type::" >
|	<TYPEREF_OLD: "Type::" >
|	<LP: "(" >
|	<RP: ")" >
|	<LCB: "{" >
|	<RCB: "}" >
|	<LB: "[" >
|	<RB: "]" >
|	<OR: "|" >
|	<GT: ">">
|	<LT: "<">
|	<QUESTIONMARK: "?">
|	<EXTENDS: "extends">
|	<SUPER: "super">
|	<ABSTRACT: "abstract" >
|	<COMMA: "," >
|	<COLON: ":" >
|	<DOUBLE_COLON: "::" >
|	<SEMICOLON: ";">
|	<CARET: "^">
|	<PLUS: "+">
|	<FUNCTION_ARG: <PERCENT><DIGIT>>
|	<THIS: "this">
|	<TYPE: <LITERAL> (<PERIOD> <LITERAL>)*>
|	<LITERAL : <LETTER> (<DIGIT> | <LETTER>)*>
|	<DOTDOTDOT  : <PERIOD><PERIOD><PERIOD>>
|	<#LETTER:[
		"\u0024",
		"\u0041"-"\u005a",
		"\u005f",
		"\u0061"-"\u007a",
		"\u00c0"-"\u00d6",
		"\u00d8"-"\u00f6",
		"\u00f8"-"\u00ff",
		"\u0100"-"\u1fff",
		"\u3040"-"\u318f",
		"\u3300"-"\u337f",
		"\u3400"-"\u3d2d",
		"\u4e00"-"\u9fff",
		"\uf900"-"\ufaff"]>
|	<#DIGIT: [
		"\u0030"-"\u0039",
		"\u0660"-"\u0669",
		"\u06f0"-"\u06f9",
		"\u0966"-"\u096f",
		"\u09e6"-"\u09ef",
		"\u0a66"-"\u0a6f",
		"\u0ae6"-"\u0aef",
		"\u0b66"-"\u0b6f",
		"\u0be7"-"\u0bef",
		"\u0c66"-"\u0c6f",
		"\u0ce6"-"\u0cef",
		"\u0d66"-"\u0d6f",
		"\u0e50"-"\u0e59",
		"\u0ed0"-"\u0ed9",
		"\u1040"-"\u1049"]>
|	<#PERIOD : ".">
|	<#PERCENT : "%">
}

private void parse(JsCommentMeta meta) :
{ }
{
	(Forward(meta) | Back(meta)) VjComment(meta) <EOF>
}

private void VjComment(JsCommentMeta meta) :
{}
{
	JsAnnotation(meta) | <NEEDS> InactiveNeeds(meta) | (Modifiers(meta))* VjTyping(meta)
}

private void Back(JsCommentMeta meta) :
{ }
{
	<LT><LT>
	{
		meta.setDirection(false, true);
	}
|	<LT> 
	{
		meta.setDirection(false, false);
	}
}

private void Forward(JsCommentMeta meta) :
{}
{
	<GT><GT>
	{
		meta.setDirection(true, true);
	}
|	<GT>
	{
		meta.setDirection(true, false);
	}  
}

private void JsAnnotation(JsCommentMeta meta):
{Token token;}
{
	token = <ANNOTATION>
	{
		meta.setAnnotation(token.toString());
	}
}

private void VjTyping(JsCommentMeta meta) :
{String name = null; boolean isOptional = false; Token caret_rtnType = null; Token caret_argMeta = null;}
{
	(Template(meta))? (caret_rtnType = <CARET>)? (addTyping(meta))? (isOptional=Optional())? (caret_argMeta = <CARET>)? (name=Name())? (FormalParams(meta))? 
	{
		meta.setOptional(isOptional);
		meta.setName(name);
		meta.setTypeFactoryEnabled(caret_rtnType != null);
		meta.setFuncArgMetaExtensionEnabled(caret_argMeta != null);
	}
}

private void Modifiers(JsCommentMeta meta) :
{ Token token; }
{
	(token = <PUBLIC> | token = <PRIVATE> | token = <PROTECTED>)
	{
		meta.setAccessModifier(token);
	}
|	token = <FINAL>
	{
		meta.setFinal();
	}
|	token = <ABSTRACT>
	{
		meta.setAbstract();
	}
|	token = <STATIC>
	{
		meta.setStatic();
	}
|	token = <DYNAMIC>
	{
		meta.setDynamic();
	}
}

private void addTyping(JsCommentMeta meta) :
{ JsTypingMeta typing = null; }
{
	<LCB>typing = MultiTypes(meta)<RCB>
	{
		meta.setTyping(typing);
	}
|	<LB>typing = MixinType(meta)<RB>
	{
		meta.setTyping(typing);
	}
|	typing = Typing(meta)
	{
		meta.setTyping(typing);
	}
}

private JsTypingMeta Typing(JsCommentMeta meta) :
{JsTypingMeta typing; int dim=0;}
{
	typing = DynamicTypingInFuncReturn()
	{
		return typing;
	}
|	typing = BasicTyping(meta) (dim = ArrayDimensions())?
	{
		typing.setDimension(dim);
		return typing;
	}
}

private JsTypingMeta BasicTyping(JsCommentMeta meta) :
{	Token token;	
	Token attr = null;
	Token attr_ops;
	JsTypingMeta typing;
}
{
	<LP> (typing = FuncDeclaration()) <RP>
	{
		return typing;
	}
|	<ALIASREF> (token = <TYPE>)
	{
		typing = new JsType(token).setAliasRef(true);
		return typing;
	}
|	<TYPEREF> (token = <TYPE>)
	{
		typing = new JsType(token).setTypeRef(true);
		return typing;
	}
|	<TYPEREF_OLD> (token = <TYPE>)
	{
		typing = new JsType(token).setTypeRef(true);
		return typing;
	}
|	(token = <TYPE>) Generic((JsType)(typing = new JsType(token)), meta) 
	{
		return typing;
	}
|	(token = <TYPE>) (attr_ops = <COLON>) (attr = <TYPE>)?
	{
       return new JsAttributed(token, attr_ops, attr, true);
	}
|	(token = <TYPE>) (attr_ops = <DOUBLE_COLON>) (attr = <TYPE>)?
	{
       return new JsAttributed(token, attr_ops, attr, false);
	}
|	(attr_ops = <DOUBLE_COLON>) (attr = <TYPE>)?
	{
		return new JsAttributed(null, attr_ops, attr, false);
	}
|	(token = <TYPE>)
	{
		typing = new JsType(token);
		return typing;
	}
}

private JsTypingMeta DynamicTypingInFuncReturn() :
{	Token token;
}
{
	(token = <THIS>)
	{
		return new JsFuncScopeAttributedType(token);
	}
|	(token = <FUNCTION_ARG>)
	{
		return new JsFuncArgAttributedType(token);
	}
}

private void Template(JsCommentMeta meta) :
{}
{
	Generic(null, meta)
}

private void Generic(JsType type, JsCommentMeta meta) :
{}
{
	<LT> GenericParam(type, meta) (<COMMA> GenericParam(type, meta))* <GT>
}

private void GenericParam(JsType type, JsCommentMeta meta) :
{	
	Token templeteToken = null;
	JsTypingMeta templeteType = null;
	JsTypingMeta boundedType = null;
}
{
	<QUESTIONMARK> <EXTENDS> (boundedType = Typing(null))
	{
		JsCommentMeta.addTempleteArg(meta, type, ArgType.WildCardType.EXTENDS, boundedType);
	}
|	<QUESTIONMARK> <SUPER> (boundedType = Typing(null))
	{
		JsCommentMeta.addTempleteArg(meta, type, ArgType.WildCardType.SUPER, boundedType);
	}
|	(templeteToken = <TYPE>) <EXTENDS> (boundedType = Typing(null))
	{
		JsCommentMeta.addTempleteArg(meta, type, new JsType(templeteToken), ArgType.WildCardType.EXTENDS, boundedType);
	}
|	(templeteToken = <TYPE>) <SUPER> (boundedType = Typing(null))
	{
		JsCommentMeta.addTempleteArg(meta, type, new JsType(templeteToken), ArgType.WildCardType.SUPER, boundedType);
	}
|	<QUESTIONMARK>
	{
		JsCommentMeta.addTempleteArg(meta, type);
	}
|	(templeteType = Typing(null))
	{
		JsCommentMeta.addTempleteArg(meta, type, templeteType);
	}
}  

private String Name() :
{ Token token; }
{
	token = <TYPE>
	{
		return token.image;
	}
|	token = <NEEDS>{
		return token.image;
	}
}

private void InactiveNeeds(JsCommentMeta meta) :
{}
{
	<LP> Need(meta) (<COMMA> Need(meta))* <RP>
	{		
	}
|	Need(meta) (<COMMA> Need(meta))*
	{		
	}
}

private void Need(JsCommentMeta meta) :
{ Token token; }
{
	token = <TYPE>
	{
		meta.addNeedsAnnotation(token);
	}
}

private JsTypingMeta FuncDeclaration() :
{String name = null; boolean isOptional = false; JsCommentMeta meta = new JsCommentMeta();}
{
	(addTyping(meta))? (isOptional=Optional())? (name=Name())? (FormalParams(meta))?
	{
	    meta.getTyping().setOptional(isOptional);
		meta.setName(name);
		return meta.getTyping();
	}
}

private void FormalParams(JsCommentMeta meta) :
{  }
{
	<LP> <RP>
	{
		meta.setMethod();	
	}
|	<LP> FormalParam(meta.setMethod()) (<COMMA> FormalParam(meta))* <RP>
	{
	} 
}

private void FormalParam(JsCommentMeta meta) : 
{	JsTypingMeta typing;
	String name = null;
	boolean isFinal = false;
	boolean isOptional = false;
	boolean isVariable = false;}
{
	(isFinal=Final())? typing=ParamType() (isOptional=Optional() | isVariable=VariableArg())? (name = Name())?
	{
		meta.addParam(name, typing, isFinal, isOptional, isVariable);
	}
}

private JsTypingMeta ParamType() :
{JsTypingMeta typing;}
{
	<LCB>typing = MultiTypes(null)<RCB>
	{
		return typing;
	}
	
|	<LB>typing = MixinType(null)<RB>
	{
		 return typing;
	}
	
|	typing = Typing(null)
	{		
		return typing;
	}
}

private JsVariantType MultiTypes(JsCommentMeta meta) :
{JsVariantType typing = new JsVariantType();}
{	
	collectTyping(typing, null) (<OR> collectTyping(typing, null))*
	{
		return typing;
	}
}

private void collectTyping(JsVariantType typing, JsCommentMeta meta) :
{JsTypingMeta typingMeta = null;}
{
	typingMeta = Typing(meta)
	{
		typing.add(typingMeta);
	}
}

private JsMixinType MixinType(JsCommentMeta meta) :
{JsMixinType typing = new JsMixinType();}
{	
	mixinTyping(typing, null) (<PLUS> mixinTyping(typing, null))*
	{
		return typing;
	}
}

private void mixinTyping(JsMixinType typing, JsCommentMeta meta) :
{JsTypingMeta typingMeta = null;}
{
	typingMeta = Typing(meta)
	{
		typing.add(typingMeta);
	}
}

private boolean Optional() :
{}
{
	<QUESTIONMARK>
	{
		return true;
	}
}

private boolean VariableArg() :
{}
{
	<DOTDOTDOT>
	{
		return true;
	}
}

private boolean Final() :
{}
{
	<FINAL>
	{
		return true;
	}
}
 
private int ArrayDimensions() :
{int[] dim = {0};}
{
	ArrayDimension(dim) (ArrayDimension(dim))*
	{
		return dim[0];
	}
}

private void ArrayDimension(int[] dim) :
{}
{
	<LB> <RB>
	{
		dim[0] = dim[0] + 1;
	}
}

package org.eclipse.vjet.dsf.jstojava.codegen.data;

import java.util.Date;
import org.eclipse.vjet.vsf.jsref.JsFunc;
import org.eclipse.vjet.dsf.common.binding.IValueBinding;
import org.eclipse.vjet.vsf.jsref.JsProp;
import org.eclipse.vjet.vsf.jsruntime.jsref.IJsPropSetter;
import org.eclipse.vjet.vsf.jsref.internals.JsCmpMeta;
import org.eclipse.vjet.vsf.jsref.JsTypeRef;
import org.eclipse.vjet.vsf.jsref.JsObjData;
import org.eclipse.vjet.dsf.spec.component.IComponentSpec;
import org.eclipse.vjet.vsf.resource.pattern.js.JsResource;
import org.eclipse.vjet.vsf.resource.pattern.js.IJsResourceRef;
import org.eclipse.vjet.dsf.jstojava.codegen.data.ATypeJsr;
import org.eclipse.vjet.dsf.jstojava.codegen.data.ITypeJsr;
import org.eclipse.vjet.dsf.jstojava.codegen.data.MTypeJsr;

@org.eclipse.vjet.dsf.resource.utils.CodeGen("JsrGenerator")
public class CTypeComplexJsr extends ATypeJsr implements ITypeJsr {
    private static final long serialVersionUID = 1L;

    private static final JsObjData S = 
        new JsObjData("org.eclipse.vjet.dsf.jstojava.codegen.data.CTypeComplex", CTypeComplexJsr.class, "CTypeComplex");

    
    public static class ResourceSpec {
        public static IComponentSpec getInstance() {
            return S.getResourceSpec(); 
        }
        public static final JsResource RESOURCE = S.getJsResource();
        public static final IJsResourceRef REF = S.getJsResourceRef();
    }

    public static final IComponentSpec SPEC = S.getResourceSpec()
        .addDependentComponent(ATypeJsr.ResourceSpec.getInstance())
        .addDependentComponent(ITypeJsr.ResourceSpec.getInstance())
        .addDependentComponent(MTypeJsr.ResourceSpec.getInstance());

    public CTypeComplexJsr(String arg1){
        super(S.getJsCmpMeta(), true, arg1);
    }

    public CTypeComplexJsr(IValueBinding<String> arg1){
        super(S.getJsCmpMeta(), true, arg1);
    }

    protected CTypeComplexJsr(JsCmpMeta cmpMeta, boolean isInstance, Object... args) {
        super(cmpMeta, isInstance, args);
    }

    public static JsProp<String> sProp1(){
        return getProp(S, String.class, "sProp1");
    }

    public static IJsPropSetter sProp1(String v) {
        return setProp(S, "sProp1", v);
    }

    public static IJsPropSetter sProp1(IValueBinding<String> v) {
        return setProp(S, "sProp1", v);
    }

    public static JsProp<Integer> sProp2(){
        return getProp(S, Integer.class, "sProp2");
    }

    public static IJsPropSetter sProp2(int v) {
        return setProp(S, "sProp2", v);
    }

    public static IJsPropSetter sProp2(IValueBinding<Integer> v) {
        return setProp(S, "sProp2", v);
    }

    public static JsProp<String> s_mixinPropOne(){
        return getProp(S, String.class, "s_mixinPropOne");
    }

    public static IJsPropSetter s_mixinPropOne(String v) {
        return setProp(S, "s_mixinPropOne", v);
    }

    public static IJsPropSetter s_mixinPropOne(IValueBinding<String> v) {
        return setProp(S, "s_mixinPropOne", v);
    }

    public static JsFunc<Void> doItStaticAbstract(String arg){
        return call(S, "doItStaticAbstract").with(arg);
    }

    public static JsFunc<Void> doItStaticAbstract(IValueBinding<String> arg){
        return call(S, "doItStaticAbstract").with(arg);
    }

    public static JsFunc<Void> doItStaticAbstract(){
        return call(S, "doItStaticAbstract");
    }

    public static JsFunc<Void> hasOptionalParamStatic(String pParam1, boolean pOptParam2, String pOptParam3, String pOptParam4){
        return call(S, "hasOptionalParamStatic").with(pParam1, pOptParam2, pOptParam3, pOptParam4);
    }

    public static JsFunc<Void> hasOptionalParamStatic(IValueBinding<String> pParam1, IValueBinding<Boolean> pOptParam2, IValueBinding<String> pOptParam3, IValueBinding<String> pOptParam4){
        return call(S, "hasOptionalParamStatic").with(pParam1, pOptParam2, pOptParam3, pOptParam4);
    }

    public static JsFunc<Void> hasOptionalParamStatic(String pParam1, String pOptParam2, String pOptParam3, String pOptParam4){
        return call(S, "hasOptionalParamStatic").with(pParam1, pOptParam2, pOptParam3, pOptParam4);
    }

    public static JsFunc<Void> hasOptionalParamStatic(IValueBinding<String> pParam1, IValueBinding<String> pOptParam2, IValueBinding<String> pOptParam3, IValueBinding<String> pOptParam4, 
            org.eclipse.vjet.vsf.jsref.d.D1... notUsed){
        return call(S, "hasOptionalParamStatic").with(pParam1, pOptParam2, pOptParam3, pOptParam4);
    }

    public static JsFunc<Void> hasOptionalParamStatic(char pParam1, boolean pOptParam2, String pOptParam3, String pOptParam4){
        return call(S, "hasOptionalParamStatic").with(pParam1, pOptParam2, pOptParam3, pOptParam4);
    }

    public static JsFunc<Void> hasOptionalParamStatic(IValueBinding<Character> pParam1, IValueBinding<Boolean> pOptParam2, IValueBinding<String> pOptParam3, IValueBinding<String> pOptParam4, 
            org.eclipse.vjet.vsf.jsref.d.D2... notUsed){
        return call(S, "hasOptionalParamStatic").with(pParam1, pOptParam2, pOptParam3, pOptParam4);
    }

    public static JsFunc<Void> hasOptionalParamStatic(char pParam1, String pOptParam2, String pOptParam3, String pOptParam4){
        return call(S, "hasOptionalParamStatic").with(pParam1, pOptParam2, pOptParam3, pOptParam4);
    }

    public static JsFunc<Void> hasOptionalParamStatic(IValueBinding<Character> pParam1, IValueBinding<String> pOptParam2, IValueBinding<String> pOptParam3, IValueBinding<String> pOptParam4, 
            org.eclipse.vjet.vsf.jsref.d.D3... notUsed){
        return call(S, "hasOptionalParamStatic").with(pParam1, pOptParam2, pOptParam3, pOptParam4);
    }

    public static JsFunc<Void> hasOptionalParamStatic(String pParam1, boolean pOptParam2, String pOptParam3){
        return call(S, "hasOptionalParamStatic").with(pParam1, pOptParam2, pOptParam3);
    }

    public static JsFunc<Void> hasOptionalParamStatic(IValueBinding<String> pParam1, IValueBinding<Boolean> pOptParam2, IValueBinding<String> pOptParam3){
        return call(S, "hasOptionalParamStatic").with(pParam1, pOptParam2, pOptParam3);
    }

    public static JsFunc<Void> hasOptionalParamStatic(String pParam1, boolean pOptParam2){
        return call(S, "hasOptionalParamStatic").with(pParam1, pOptParam2);
    }

    public static JsFunc<Void> hasOptionalParamStatic(IValueBinding<String> pParam1, IValueBinding<Boolean> pOptParam2){
        return call(S, "hasOptionalParamStatic").with(pParam1, pOptParam2);
    }

    public static JsFunc<Void> hasOptionalParamStatic(String pParam1){
        return call(S, "hasOptionalParamStatic").with(pParam1);
    }

    public static JsFunc<Void> hasOptionalParamStatic(IValueBinding<String> pParam1){
        return call(S, "hasOptionalParamStatic").with(pParam1);
    }

    public static JsFunc<Void> hasOptionalParamStatic(String pParam1, String pOptParam2, String pOptParam3){
        return call(S, "hasOptionalParamStatic").with(pParam1, pOptParam2, pOptParam3);
    }

    public static JsFunc<Void> hasOptionalParamStatic(IValueBinding<String> pParam1, IValueBinding<String> pOptParam2, IValueBinding<String> pOptParam3, 
            org.eclipse.vjet.vsf.jsref.d.D1... notUsed){
        return call(S, "hasOptionalParamStatic").with(pParam1, pOptParam2, pOptParam3);
    }

    public static JsFunc<Void> hasOptionalParamStatic(String pParam1, String pOptParam2){
        return call(S, "hasOptionalParamStatic").with(pParam1, pOptParam2);
    }

    public static JsFunc<Void> hasOptionalParamStatic(IValueBinding<String> pParam1, IValueBinding<String> pOptParam2, 
            org.eclipse.vjet.vsf.jsref.d.D1... notUsed){
        return call(S, "hasOptionalParamStatic").with(pParam1, pOptParam2);
    }

    public static JsFunc<Void> hasOptionalParamStatic(char pParam1, boolean pOptParam2, String pOptParam3){
        return call(S, "hasOptionalParamStatic").with(pParam1, pOptParam2, pOptParam3);
    }

    public static JsFunc<Void> hasOptionalParamStatic(IValueBinding<Character> pParam1, IValueBinding<Boolean> pOptParam2, IValueBinding<String> pOptParam3, 
            org.eclipse.vjet.vsf.jsref.d.D2... notUsed){
        return call(S, "hasOptionalParamStatic").with(pParam1, pOptParam2, pOptParam3);
    }

    public static JsFunc<Void> hasOptionalParamStatic(char pParam1, boolean pOptParam2){
        return call(S, "hasOptionalParamStatic").with(pParam1, pOptParam2);
    }

    public static JsFunc<Void> hasOptionalParamStatic(IValueBinding<Character> pParam1, IValueBinding<Boolean> pOptParam2, 
            org.eclipse.vjet.vsf.jsref.d.D2... notUsed){
        return call(S, "hasOptionalParamStatic").with(pParam1, pOptParam2);
    }

    public static JsFunc<Void> hasOptionalParamStatic(char pParam1){
        return call(S, "hasOptionalParamStatic").with(pParam1);
    }

    public static JsFunc<Void> hasOptionalParamStatic(IValueBinding<Character> pParam1, 
            org.eclipse.vjet.vsf.jsref.d.D1... notUsed){
        return call(S, "hasOptionalParamStatic").with(pParam1);
    }

    public static JsFunc<Void> hasOptionalParamStatic(char pParam1, String pOptParam2, String pOptParam3){
        return call(S, "hasOptionalParamStatic").with(pParam1, pOptParam2, pOptParam3);
    }

    public static JsFunc<Void> hasOptionalParamStatic(IValueBinding<Character> pParam1, IValueBinding<String> pOptParam2, IValueBinding<String> pOptParam3, 
            org.eclipse.vjet.vsf.jsref.d.D3... notUsed){
        return call(S, "hasOptionalParamStatic").with(pParam1, pOptParam2, pOptParam3);
    }

    public static JsFunc<Void> hasOptionalParamStatic(char pParam1, String pOptParam2){
        return call(S, "hasOptionalParamStatic").with(pParam1, pOptParam2);
    }

    public static JsFunc<Void> hasOptionalParamStatic(IValueBinding<Character> pParam1, IValueBinding<String> pOptParam2, 
            org.eclipse.vjet.vsf.jsref.d.D3... notUsed){
        return call(S, "hasOptionalParamStatic").with(pParam1, pOptParam2);
    }

    public static JsFunc<Void> staticMethodI2(){
        return call(S, "staticMethodI2");
    }

    public static JsFunc<Void> staticMethodI3(){
        return call(S, "staticMethodI3");
    }

    public static JsFunc<Void> mixinStaticMethod(){
        return call(S, "mixinStaticMethod");
    }

    public JsProp<String> prop1(){
        return getProp(String.class, "prop1");
    }

    public IJsPropSetter prop1(String v) {
        return setProp("prop1", v);
    }

    public IJsPropSetter prop1(IValueBinding<String> v) {
        return setProp("prop1", v);
    }

    public JsProp<Integer> prop2(){
        return getProp(Integer.class, "prop2");
    }

    public IJsPropSetter prop2(int v) {
        return setProp("prop2", v);
    }

    public IJsPropSetter prop2(IValueBinding<Integer> v) {
        return setProp("prop2", v);
    }

    public JsProp<Date> propThree(){
        return getProp(Date.class, "propThree");
    }

    public IJsPropSetter propThree(Date v) {
        return setProp("propThree", v);
    }

    public IJsPropSetter propThree(IValueBinding<? extends Date> v) {
        return setProp("propThree", v);
    }

    public JsProp<String> mixinPropOne(){
        return getProp(String.class, "mixinPropOne");
    }

    public IJsPropSetter mixinPropOne(String v) {
        return setProp("mixinPropOne", v);
    }

    public IJsPropSetter mixinPropOne(IValueBinding<String> v) {
        return setProp("mixinPropOne", v);
    }

    public JsFunc<Void> doItAbstract(String arg){
        return call("doItAbstract").with(arg);
    }

    public JsFunc<Void> doItAbstract(IValueBinding<String> arg){
        return call("doItAbstract").with(arg);
    }

    public JsFunc<Void> instanceMethod(){
        return call("instanceMethod");
    }

    public JsFunc<Void> instanceMethod2(String arg){
        return call("instanceMethod2").with(arg);
    }

    public JsFunc<Void> instanceMethod2(IValueBinding<String> arg){
        return call("instanceMethod2").with(arg);
    }

    public JsFunc<Void> instanceMethod2(){
        return call("instanceMethod2");
    }

    public JsFunc<Void> hasOptionalParam(int pOptParam){
        return call("hasOptionalParam").with(pOptParam);
    }

    public JsFunc<Void> hasOptionalParam(IValueBinding<Integer> pOptParam){
        return call("hasOptionalParam").with(pOptParam);
    }

    public JsFunc<Void> hasOptionalParam(){
        return call("hasOptionalParam");
    }

    public JsFunc<Void> hasMultiTypeParam(int pParam){
        return call("hasMultiTypeParam").with(pParam);
    }

    public JsFunc<Void> hasMultiTypeParam(IValueBinding<Integer> pParam){
        return call("hasMultiTypeParam").with(pParam);
    }

    public JsFunc<Void> hasMultiTypeParam(String pParam){
        return call("hasMultiTypeParam").with(pParam);
    }

    public JsFunc<Void> hasMultiTypeParam(IValueBinding<String> pParam, 
            org.eclipse.vjet.vsf.jsref.d.D1... notUsed){
        return call("hasMultiTypeParam").with(pParam);
    }

    public JsFunc<Void> hasMultiTypeParam(Long pParam){
        return call("hasMultiTypeParam").with(pParam);
    }

    public JsFunc<Void> hasMultiTypeParam(IValueBinding<Long> pParam, 
            org.eclipse.vjet.vsf.jsref.d.D2... notUsed){
        return call("hasMultiTypeParam").with(pParam);
    }

    public JsFunc<Void> instanceMethodI2(String arg){
        return call("instanceMethodI2").with(arg);
    }

    public JsFunc<Void> instanceMethodI2(IValueBinding<String> arg){
        return call("instanceMethodI2").with(arg);
    }

    public JsFunc<Void> instanceMethodI3(String arg){
        return call("instanceMethodI3").with(arg);
    }

    public JsFunc<Void> instanceMethodI3(IValueBinding<String> arg){
        return call("instanceMethodI3").with(arg);
    }

    public JsFunc<Void> methodAbstract(String arg){
        return call("methodAbstract").with(arg);
    }

    public JsFunc<Void> methodAbstract(IValueBinding<String> arg){
        return call("methodAbstract").with(arg);
    }

    public JsFunc<Void> mixinInstanceMethod(){
        return call("mixinInstanceMethod");
    }
    
    public static JsTypeRef<CTypeComplexJsr> prototype = new JsTypeRef<CTypeComplexJsr>(S);
}
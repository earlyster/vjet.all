package org.eclipse.vjet.dsf.javatojs.tests.data.structure;

import org.eclipse.vjet.vsf.jsref.JsFunc;
import org.eclipse.vjet.dsf.common.binding.IValueBinding;
import org.eclipse.vjet.vsf.jsref.JsObj;
import org.eclipse.vjet.vsf.jsref.internals.JsCmpMeta;
import org.eclipse.vjet.vsf.jsref.JsTypeRef;
import org.eclipse.vjet.vsf.jsref.JsObjData;
import org.eclipse.vjet.dsf.spec.component.IComponentSpec;
import org.eclipse.vjet.vsf.resource.pattern.js.JsResource;
import org.eclipse.vjet.vsf.resource.pattern.js.IJsResourceRef;
import org.eclipse.vjet.dsf.javatojs.tests.data.structure.BaseJsr;
import org.eclipse.vjet.vjo.java.lang.SystemJsr;
import org.eclipse.vjet.dsf.javatojs.tests.data.structure.BaseAJsr;

@org.eclipse.vjet.dsf.resource.utils.CodeGen("JsrGenerator")
public class NestedInnerTypesJsr extends JsObj {
    private static final long serialVersionUID = 1L;

    private static final JsObjData S = 
        new JsObjData("org.eclipse.vjet.dsf.javatojs.tests.data.structure.NestedInnerTypes", NestedInnerTypesJsr.class, "NestedInnerTypes", true);

    
    public static class ResourceSpec {
        public static IComponentSpec getInstance() {
            return S.getResourceSpec(); 
        }
        public static final JsResource RESOURCE = S.getJsResource();
        public static final IJsResourceRef REF = S.getJsResourceRef();
    }

    public static final IComponentSpec SPEC = S.getResourceSpec()
        .addDependentComponent(BaseJsr.ResourceSpec.getInstance())
        .addDependentComponent(SystemJsr.ResourceSpec.getInstance())
        .addDependentComponent(BaseAJsr.ResourceSpec.getInstance());

    public NestedInnerTypesJsr(){
        super(S.getJsCmpMeta(), true);
    }

    protected NestedInnerTypesJsr(JsCmpMeta cmpMeta, boolean isInstance, Object... args) {
        super(cmpMeta, isInstance, args);
    }

    public static JsFunc<? extends BaseJsr> getBase(int i){
        return call(S, BaseJsr.class, "getBase").with(i);
    }

    public static JsFunc<? extends BaseJsr> getBase(IValueBinding<Integer> i){
        return call(S, BaseJsr.class, "getBase").with(i);
    }

    public static JsFunc<Void> main(String[] args){
        return call(S, "main").with((Object)args);
    }

    public static JsFunc<Void> main(IValueBinding<String[]> args){
        return call(S, "main").with(args);
    }
    
    public static JsTypeRef<NestedInnerTypesJsr> prototype = new JsTypeRef<NestedInnerTypesJsr>(S);
}
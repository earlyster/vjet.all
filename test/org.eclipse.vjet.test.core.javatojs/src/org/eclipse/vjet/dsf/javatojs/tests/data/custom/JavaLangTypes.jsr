package org.eclipse.vjet.dsf.javatojs.tests.data.custom;

import org.eclipse.vjet.vsf.jsref.JsFunc;
import org.eclipse.vjet.vsf.jsref.JsObj;
import org.eclipse.vjet.vsf.jsref.internals.JsCmpMeta;
import org.eclipse.vjet.vsf.jsref.JsTypeRef;
import org.eclipse.vjet.vsf.jsref.JsObjData;
import org.eclipse.vjet.dsf.spec.component.IComponentSpec;
import org.eclipse.vjet.vsf.resource.pattern.js.JsResource;
import org.eclipse.vjet.vsf.resource.pattern.js.IJsResourceRef;
import org.eclipse.vjet.vjo.java.util.LinkedListJsr;
import org.eclipse.vjet.vjo.java.lang.StringUtilJsr;
import org.eclipse.vjet.vjo.java.lang.ObjectUtilJsr;
import org.eclipse.vjet.vjo.java.lang.IntegerJsr;

@org.eclipse.vjet.dsf.resource.utils.CodeGen("JsrGenerator")
public class JavaLangTypesJsr extends JsObj {
    private static final long serialVersionUID = 1L;

    private static final JsObjData S = 
        new JsObjData("org.eclipse.vjet.dsf.javatojs.tests.data.custom.JavaLangTypes", JavaLangTypesJsr.class, "JavaLangTypes", true);

    
    public static class ResourceSpec {
        public static IComponentSpec getInstance() {
            return S.getResourceSpec(); 
        }
        public static final JsResource RESOURCE = S.getJsResource();
        public static final IJsResourceRef REF = S.getJsResourceRef();
    }

    public static final IComponentSpec SPEC = S.getResourceSpec()
        .addDependentComponent(LinkedListJsr.ResourceSpec.getInstance())
        .addDependentComponent(StringUtilJsr.ResourceSpec.getInstance())
        .addDependentComponent(ObjectUtilJsr.ResourceSpec.getInstance())
        .addDependentComponent(IntegerJsr.ResourceSpec.getInstance())
        .addDependentComponent(org.eclipse.vjet.vjo.java.lang.BooleanUtilJsr.ResourceSpec.getInstance());

    public JavaLangTypesJsr(){
        super(S.getJsCmpMeta(), true);
    }

    protected JavaLangTypesJsr(JsCmpMeta cmpMeta, boolean isInstance, Object... args) {
        super(cmpMeta, isInstance, args);
    }

    public JsFunc<Integer> testString(){
        return call(Integer.class, "testString");
    }

    public JsFunc<Void> testStringHashCode(){
        return call("testStringHashCode");
    }

    public JsFunc<Void> testBoolean(){
        return call("testBoolean");
    }
    
    public static JsTypeRef<JavaLangTypesJsr> prototype = new JsTypeRef<JavaLangTypesJsr>(S);
}
package org.eclipse.vjet.dsf.javatojs.tests.data.structure;

import org.eclipse.vjet.vsf.jsref.JsFunc;
import org.eclipse.vjet.dsf.common.binding.IValueBinding;
import org.eclipse.vjet.vsf.jsref.JsObj;
import org.eclipse.vjet.vsf.jsref.internals.JsCmpMeta;
import org.eclipse.vjet.vsf.jsref.JsTypeRef;
import org.eclipse.vjet.vsf.jsref.JsObjData;
import org.eclipse.vjet.dsf.spec.component.IComponentSpec;
import org.eclipse.vjet.vsf.resource.pattern.js.JsResource;
import org.eclipse.vjet.vsf.resource.pattern.js.IJsResourceRef;
import org.eclipse.vjet.vjo.java.util.ArrayListJsr;

@org.eclipse.vjet.dsf.resource.utils.CodeGen("JsrGenerator")
public class StatementsJsr extends JsObj {
    private static final long serialVersionUID = 1L;

    private static final JsObjData S = 
        new JsObjData("org.eclipse.vjet.dsf.javatojs.tests.data.structure.Statements", StatementsJsr.class, "Statements", true);

    
    public static class ResourceSpec {
        public static IComponentSpec getInstance() {
            return S.getResourceSpec(); 
        }
        public static final JsResource RESOURCE = S.getJsResource();
        public static final IJsResourceRef REF = S.getJsResourceRef();
    }

    public static final IComponentSpec SPEC = S.getResourceSpec()
        .addDependentComponent(ArrayListJsr.ResourceSpec.getInstance());

    public StatementsJsr(){
        super(S.getJsCmpMeta(), true);
    }

    protected StatementsJsr(JsCmpMeta cmpMeta, boolean isInstance, Object... args) {
        super(cmpMeta, isInstance, args);
    }

    public JsFunc<Void> forLoop(){
        return call("forLoop");
    }

    public JsFunc<Void> forInIterable(){
        return call("forInIterable");
    }

    public JsFunc<Void> whileLoop(){
        return call("whileLoop");
    }

    public JsFunc<Void> doWhile(){
        return call("doWhile");
    }

    public JsFunc<Integer> ifElse(int total){
        return call(Integer.class, "ifElse").with(total);
    }

    public JsFunc<Integer> ifElse(IValueBinding<Integer> total){
        return call(Integer.class, "ifElse").with(total);
    }

    public JsFunc<Integer> ifElse2(int total){
        return call(Integer.class, "ifElse2").with(total);
    }

    public JsFunc<Integer> ifElse2(IValueBinding<Integer> total){
        return call(Integer.class, "ifElse2").with(total);
    }

    public JsFunc<String> switchStmt(int id){
        return call(String.class, "switchStmt").with(id);
    }

    public JsFunc<String> switchStmt(IValueBinding<Integer> id){
        return call(String.class, "switchStmt").with(id);
    }

    public JsFunc<Void> label(){
        return call("label");
    }
    
    public static JsTypeRef<StatementsJsr> prototype = new JsTypeRef<StatementsJsr>(S);
}
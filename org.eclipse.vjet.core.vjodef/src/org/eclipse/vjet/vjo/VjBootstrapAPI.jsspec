vjo.ctype('vjo') //< public
.needs(['vjo.ctype','vjo.itype',
    'vjo.etype','vjo.mtype',
    'vjo.otype','vjo.ftype'])
//>needs(vjo.Console)
.props({
    NEEDS_IMPL:null, //< public Function
    sysout:null, //< public vjo.Console
    syserr:null, //< public vjo.Console
    //> final public vjo.ctype ctype(String? type)
    ctype:function(type){
    },
    //> final public vjo.ltype ltype(String? type)
    ltype:function(type){
    },
    //> final public vjo.itype itype(String? type)
    itype:function(type){
    },
    //> final public vjo.etype etype(String? type)
    etype:function(type){
    },
    //> final public vjo.mtype mtype(String? type)
    mtype:function(type){
    },
    //> final public vjo.otype otype(String? type)
    otype:function(type){
    },
    //> final public vjo.ftype ftype(String? type)
    ftype:function(type){
    },
    //> final public vjo.Class getType(String type)
    getType:function(type){
    },
    //> final public vjo.ctype make(Object obj,String type,Object... args)
    //> final public vjo.ctype make(Object obj,Object type,Object... args)
    make:function(obj,type){
    },
    //> final public Function hitch(Object obj,Function func)
    //> final public Function hitch(Object obj,Function func,boolean bArg)
    hitch:function(obj,func){
    },
    //> final public vjo mixin(String mtype,String target)
    //> final public vjo mixin(Object mtype,Object target)
    mixin:function(mtype,target){
    },
    //> final public boolean isArray(Object objLiteral)
    isArray:function(objLiteral){
    },
    //> final public Array createArray(Object defaultValue, int size, int... otherDimension)
    //> final public Array createArray(Object defaultValue, int size)
    //> final public Array createArray()
    createArray:function(){

    },
    //> final public Function curry(Function func,Object... args)
    curry:function(func){
    },
    //> final public void needs(String type)
    needs:function(type){
    },
    
	//> final public boolean isInstanceOf(Object,Object)
	isInstanceOf:function(obj, type){},
	
	//>final public boolean findType(Object,String)
	findType:function(type,fieldName){},
	
	//>public final bind(Object obj,String func, Object... args)
	//>public final bind(Object obj,Function func, Object... args)
	bind:function(obj, func){},
	
	//>final public create(String elementName,String value)
	create:function(elementName, value){}

})
.endType();

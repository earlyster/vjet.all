<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
  <head>
    <meta name="copyright" content="Copyright (c) 2012 eBay Inc. and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
    eBay Inc. - initial API and implementation" >
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
    <meta http-equiv="Content-Style-Type" content="text/css">
	<title>Errors/Warnings</title>
	<link rel="stylesheet" href="../../../../book.css" charset="ISO-8859-1" type="text/css">
  </head>
  <body>
	<h1>Errors/Warnings</h1>
	<p>Indicate your preferences for the Errors/Warnings settings on the
	<a class="command-link" href='javascript:executeCommand("org.eclipse.ui.window.preferences(preferencePageId=org.eclipse.vjet.ui.preferences.ProblemSeveritiesPreferencePage)")'> <img src="PLUGINS_ROOT/org.eclipse.help/command_link.png" alt="Opens the Errors/Warnings preference page">
	<b> VJET &gt; Validators &gt; Errors/Warnings </b></a> preference page.</p>

    <img src="../../../images/pref_error.gif">

	<h3>VJET Specific</h3>
	<table border="1" cellspacing="0" cellpadding="5" width="800">
	  <tr>
		<th width="100">Option</th>
		<th width="300">Description</th>
		<th width="50">Default</th>
		<th rowspan="1" colspan="1" width="350">Example</th>
	  </tr>
	  <tr>
		<td valign="top"> Vjo syntax isn't correct</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters a Vjo syntax error. 
		</td>
		<td valign="top">Error</td>
		<td>&nbsp;</td>
	  </tr>
	
	  <tr>
	  	<td valign="top">Missing endType</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever a endType is missing. 
		</td>
		<td valign="top">Error</td>
		<td>&nbsp;</td>
	  </tr>
	  
	  <tr>
		<td valign="top">Class name cannot have numeric token</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters a numeric token in the class name. 
		</td>
		<td valign="top">Error</td>
		<td>&nbsp;</td>
	  </tr>
	  
	  <tr>
		<td valign="top">OType should not have inner type</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters an inner type in the OType. 
		</td>
		<td valign="top">Error</td>
		<td>&nbsp;</td>
	  </tr>
	  
	  <tr>
		<td valign="top">OType should not have none object literal typed property</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters none object literal typed property in OType(such as int type). 
		</td>
		<td valign="top">Error</td>
		<td>&nbsp;</td>
	  </tr>
	  
	  <tr>
		<td valign="top">Main class should be public</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever a main class is not declared as public. 
		</td>
		<td valign="top">Warnings</td>
		<td>&nbsp;</td>
	  </tr>
	  
	  <tr>
		<td valign="top">Multiple protos</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters more than one protos in the field. 
		</td>
		<td valign="top">Error</td>
		<td>&nbsp;</td>
	  </tr>
	  
	  <tr>
		<td valign="top">Redundant import</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters redundant import. 
		</td>
		<td valign="top">Warning</td>
		<td>&nbsp;</td>
	  </tr>
	  
	  <tr>
	    <td valign="top">Multiple props</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters more than one props in the field. 
		</td>
		<td valign="top">Error</td>
		<td>&nbsp;</td>
	  </tr>
	  
	  <tr>
		<td valign="top">IType cannot have none-public modifier </td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters none-public modifier in IType. 
		</td>
		<td valign="top">Error</td>
		<td>&nbsp;</td>
	  </tr>
	
	  <tr>
		<td valign="top">Multiple inherits</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters more than one inherits. 
		</td>
		<td valign="top">Error</td>
		<td>&nbsp;</td>
	  </tr>
	
	  <tr>
		<td valign="top">OType should not be as inner type</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters OType being an inner type. 
		</td>
		<td valign="top">Error</td>
		<td>&nbsp;</td>
	  </tr>
	
	  <tr>
		<td valign="top">IType shouldn't define method body</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters IType defines a method body. 
		</td>
		<td valign="top">Error</td>
		<td>&nbsp;</td>
	  </tr>
	
	  <tr>
		<td valign="top">IType shouldn't define instance property</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters IType defines an instance property. 
		</td>
		<td valign="top">Error</td>
		<td>&nbsp;</td>
	  </tr>
	
	  <tr>
		<td valign="top">Public class should reside in corresponding file path</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters the public class does not reside in corresponding file path. 
		  <br>( The public class path does not match the corresponding file path )
		</td>
		<td valign="top">Warning</td>
		<td>&nbsp;</td>
	  </tr>
	
	  <tr>
		<td valign="top">Unknown type, missing import</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters an unknown type and does not find its import.
		</td>
		<td valign="top">Warning</td>
		<td>The type exists in other .js file, but not imported into current file</td>
	  </tr>
	
	  <tr>
		<td valign="top">Unknown type, not found in type space</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters an unknown type and does not find its definition in context.
		</td>
		<td valign="top">Error</td>
		<td>The type does not exist. So when you're calling this type, an error/warning message will show in the problems view.</td>
	  </tr>
	
	  <tr>
		<td valign="top">namespace collision</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters duplicate namespace.
		</td>
		<td valign="top">Error</td>
		<td>&nbsp;</td>
	  </tr>
	  
	  <tr>
		<td valign="top">invalid indentifier found</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters an invalid indentifier. 
		</td>
		<td valign="top">Error</td>
		<td>&nbsp;</td>
	  </tr>
    </table>
    
	<h3>Accessibility violation</h3>
	<table border="1" cellspacing="0" cellpadding="5" width="800">
	  <tr>
		<th width="100">Option</th>
		<th width="300">Description</th>
		<th width="50">Default</th>
		<th rowspan="1" colspan="1" width="350">Example</th>
	  </tr>
	  
	  <tr>
		<td valign="top">package is not found in the scope</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever the package is not found in the scope. 
		</td>
		<td valign="top">Error</td>
		<td>&nbsp;</td>
	  </tr>
	  
	  <tr>
		<td valign="top">Can't access none-static method from static context</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters any none-static method access from props(static). 
		</td>
		<td valign="top">Error</td>
		<td>&nbsp;</td>
	  </tr>
	  
	  <tr>
		<td valign="top">Property isn't visible in the context</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters an invisible property but displays in the context. 
		</td>
		<td valign="top">Warning</td>
		<td>
		  A property(as : 1) is declared as private in other .js file. 
		  <br>So when you're calling this property in other .js file( new this.vj$.Sample.as ), an error/warning will show in the problems view.
		</td>
	  </tr>

	  <tr>
		<td valign="top">Can't access static method from none-static context</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters any static method access from protos(none-static). 
		</td>
		<td valign="top">Error</td>
		<td>&nbsp;</td>
	  </tr>
	  
	  <tr>
		<td valign="top">Method isn't visible in the context</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters an invisible method but displays in the context. 
		</td>
		<td valign="top">Warning</td>
		<td>
		  A method( foo:function(){} //< private void foo() ) is declared as private in other .js file. 
		  <br>So when you're calling this property in other .js file( new this.vj$.Sample.foo() ), an error/warning will show in the problems view.
		</td>
	  </tr>
	  
	  <tr>
		<td valign="top">Can't access none-static field from static context</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters any none-static type access from props(static). 
		</td>
		<td valign="top">Error</td>
		<td>&nbsp;</td>
	  </tr>
	  
	  <tr>
		<td valign="top">Can't access static field from none-static context</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters any static type access from protos(none-static). 
		</td>
		<td valign="top">Error</td>
		<td>&nbsp;</td>
	  </tr>
	</table>

	<h3>Type incompatibilities</h3>
	<table border="1" cellspacing="0" cellpadding="5" width="800">
	  <tr>
		<th>Option</th>
		<th>Description</th>
		<th>Default</th>
		<th>Example</th>
	  </tr>
	  
	  <tr>
		<td valign="top">dimension should be integer if using vjo.createArray(val,dimension)</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters the dimension is not an integer type. 
		</td>
		<td valign="top">Error</td>
		<td>&nbsp;</td>
	  </tr>
	  
	  <tr>
		<td valign="top">Require number|string expression here</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters type unmatched problem.
		</td>
		<td valign="top">Warning</td>
		<td>
		  The operator plus(+), the type on the two sides of this operator should be the same.(a and b are both integer type or string, etc.)
		</td>
	  </tr>
	  
	  <tr>
		<td valign="top">Require boolean expression here</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters type unmatched problem.
		</td>
		<td valign="top">Warning</td>
		<td>
		  In the if statement, you can choose a boolean type as the expression(see Sample1 below), but in JS it is also available if you use other type of expressions like number or string(see Sample2 below)
		  <pre>
Sample1:
var i = 1;
if(i == 1) 
<em>statement</em>;
		  </pre>
		  <pre>
Sample2:
var i = 1;
if(i) 
<em>statement</em>
		  </pre>
		</td>
	  </tr>
	  
	  <tr>
		<td valign="top">The index of the array should with integer or string type</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters the index of the array is not an integer or string type.
		</td>
		<td valign="top">Error</td>
		<td>&nbsp;</td>
	  </tr>
	  
	  <tr>
		<td valign="top">The arguments type of the method don't match</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters the arguments type of the method don't match.
		</td>
		<td valign="top">Warning</td>
		<td>
		<pre>
//> public void main(String[] args)
  main:function(args){    
    this.foo("hello", "world");
  },

//> public void foo(int i, int j)
  foo:function(i, j){
    var a = i;
    var b = j;
    vjo.sysout.println(a + b);
  }
        </pre>
		</td>
	  </tr>
	  
	  <tr>
		<td valign="top">Require number expression here</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters type unmatched problem.
		</td>
		<td valign="top">Warning</td>
		<td>The operator minus(-), the type on the two sides of this operator should be the Number.</td>
	  </tr>

	  <tr>
		<td valign="top">Method should return value compatible with its definition</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters the returned value does not compatible with its definition.
		</td>
		<td valign="top">Warning</td>
		<td>&nbsp;</td>
	  </tr>
	  
	  <tr>
		<td valign="top">Require boolean|number expression here</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters type unmatched problem.
		</td>
		<td valign="top">Warning</td>
		<td>Please refer to <em>Require boolean expression here</em>.</td>
	  </tr>
	  
	  <tr>
		<td valign="top">Require expressions to be consistent here</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters type inconsistent problem.
		</td>
		<td valign="top">Warning</td>
		<td>
		  The ternary operator. 
		  <br>Suppose an expression: a>b?a:b. In order to avoid side effects, a and b are recommended to have the same type. Like they are both int type or string type.
		</td>
	  </tr>
	  
	  <tr>
		<td valign="top">class should be able to instantiate</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters an abstract class was instantiated.
		</td>
		<td valign="top">Error</td>
		<td>&nbsp;</td>
	  </tr>
	  
	  <tr>
		<td valign="top">Cast should have compatible type</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters a cast without a compatible type.
		</td>
		<td valign="top">Warning</td>
		<td>&nbsp;</td>
	  </tr>
	  
	  <tr>
		<td valign="top">Assignment should have compatible type</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters type unmatched problem.
		</td>
		<td valign="top">Warning</td>
		<td>
		  The operator equal(=), the type on the two side of this operator should be the same. Or you can use <em>Type Cast</em>. 
		  <pre>
var i = 1; //< int
var j; //< int j = i;
		  </pre>
	  </tr>
	  
	  <tr>
		<td valign="top">Object should have class type</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters object but do not have a class type.
		</td>
		<td valign="top">Error</td>
		<td>&nbsp;</td>
	  </tr>
	  
	  <tr>
		<td valign="top">The parameters type of the method should not be void </td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters a void parameters type of the method.
		</td>
		<td valign="top">Warning</td>
		<td>In a function:
		<pre>
foo:funciton(){}//< public void foo(<em>void</em>)
		</pre>
		</td>
	  </tr>
	  
	  <tr>
		<td valign="top">item type should compatible with array type</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters unmatched item type of an array.
		</td>
		<td valign="top">Warning</td>
		<td>&nbsp;</td>
	  </tr>
	</table>

	<h3>Misc Problems</h3>
	<table border="1" cellspacing="0" cellpadding="5" width="800">
	  <tr>
		<th>Option</th>
		<th>Description</th>
		<th>Default</th>
		<th>Example</th>
	  </tr>
	  
	  <tr>
		<td valign="top">Qualifier is not found in the context</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it does not find any qualifier.
		</td>
		<td valign="top">Error</td>
		<td>&nbsp;</td>
	  </tr>
	  
	  <tr>
		<td valign="top">Should not assign to enum type</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters an assignment to an enum type.
		  <br>(Since for any constant defined in enum type is default declared as a final type)
		</td>
		<td valign="top">Error</td>
		<td>&nbsp;</td>
	  </tr>
	  
	  <tr>
		<td valign="top">Void method can't return value</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters a method with a returned value.
		</td>
		<td valign="top">Warning</td>
		<td>&nbsp;</td>
	  </tr>
	  
	  <tr>
		<td valign="top">Private method isn't invoked anywhere</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters a private method method was invoked.
		</td>
		<td valign="top">Warning</td>
		<td>&nbsp;</td>
	  </tr>
	  
	  <tr>
		<td valign="top">Statement is unreachable</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters an unreachable statement.
		</td>
		<td valign="top">Warning</td>
		<td> 
		<pre>
//> public void foo() 
  foo:funciton() {
    var i=1; //< int 
    return;
    <em>vjo.sysout.println(i);</em>
    (This statement is unreachable)
  }     </pre>
		</td>
	  </tr>

	  <tr>
		<td valign="top">class obj should be defined</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters class obj is not defined.
		</td>
		<td valign="top">Error</td>
		<td>&nbsp;</td>
	  </tr>
	  
	  <tr>
		<td valign="top">The number of the method's arguments don't match</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters an unreachable number of the method's arguments.
		</td>
		<td valign="top">Warning</td>
		<td>&nbsp;</td>
	  </tr>

	  <tr>
		<td valign="top">Overloading method having ambiguous invocation</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters an ambiguous overloading method.
		</td>
		<td valign="top">Warning</td>
		<td>
		<pre>
//> public void bar(String...)
//> public void bar(String)
bar: function(i){
}	    </pre>
		</td>
	  </tr>
	  
	  <tr>
		<td valign="top">val should be defined if using vjo.createArray(val,dimension)</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters the val is not defined. 
		</td>
		<td valign="top">Error</td>
		<td>&nbsp;</td>
	  </tr>
	  
	  <tr>
		<td valign="top">Qualifier shouldn't be null</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters qualifier is null. 
		</td>
		<td valign="top">Error</td>
		<td>&nbsp;</td>
	  </tr>
	  
	  <tr>
		<td valign="top">cannot find define</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters undefined variables. 
		</td>
		<td valign="top">Error</td>
		<td>&nbsp;</td>
	  </tr>
	  
	  <tr>
		<td valign="top">Method is not found in the context</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters method is not found in the context. 
		</td>
		<td valign="top">Warning</td>
		<td>&nbsp;</td>
	  </tr>
	  
	  <tr>
		<td valign="top">Overload methods having variable modifier</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters overload methods having variable modifier. 
		</td>
		<td valign="top">Error</td>
		<td>&nbsp;</td>
	  </tr>
	  
	  <tr>
		<td valign="top">Should not assign to final field</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters any assignment to final field. 
		</td>
		<td valign="top">Error</td>
		<td>&nbsp;</td>
	  </tr>

	  <tr>
		<td valign="top">final property in the constructs method should be initialized</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters final property in the constructs method is not initialized. 
		</td>
		<td valign="top">Warning</td>
		<td>
		<pre>
.protos({ 
  //>public constructs()
  constructs : function(){
    var s = 1;//< final
  }
})      </pre>
		</td>
	  </tr>
	  
	  <tr>
		<td valign="top">Property is not found in the scope</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters undefined properties. 
		</td>
		<td valign="top">Warning</td>
		<td>&nbsp;</td>
	  </tr>
	  
	  <tr>
		<td valign="top">Cannot use uninitialized type</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters an uninitialized type .
		</td>
		<td valign="top">Warning</td>
		<td>
		<pre>
//>public constructs()
  constructs : function(){
    var s = 1;//< final
  }     </pre>
		</td>
	  </tr>
	  
	  <tr>
		<td valign="top">None void method requires return type</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters a none void method missing a returned value.
		</td>
		<td valign="top">Warning</td>
		<td>&nbsp;</td>
	  </tr>
	</table>

	<h3>Uniqueness violation</h3>
	<table border="1" cellspacing="0" cellpadding="5" width="800">
	  <tr>
		<th>Option</th>
		<th>Description</th>
		<th>Default</th>
		<th>Example</th>
	  </tr>
	  
	  <tr>
		<td valign="top">Object literal cannot have multiple keys with the same name</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters duplicate name in the object literal.
		</td>
		<td valign="top">Error</td>
		<td>
		<pre>
vjo.otype("sample.OTypeSample1")
.defs({
  prop1: {
    name: 121,
	name: 123
  },
})
.endType();</pre>
		</td>
	  </tr>
	  
	  <tr>
		<td valign="top">Duplicate methods with the same name</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters duplicate methods with the same name.
		</td>
		<td valign="top">Error</td>
		<td>&nbsp;</td>
	  </tr>
	  
	  <tr>
		<td valign="top">Overlap static and none-static method</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters methods with same name in props(static) and protos(none-static) field.
		</td>
		<td valign="top">Error</td>
		<td>&nbsp;</td>
	  </tr>
	  
	  <tr>
		<td valign="top">With scope may conflicts with local scope, check with scope's properties and methods</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters with scope conflicts.
		</td>
		<td valign="top">Warning</td>
		<td>
		<pre>
vjo.ctype('sample.VJOSample') {
  i: 1, //< int
  //> public void foo()
  foo:function(){ 
    var i = 0; //< int 
    var j = 1;
    with (j) {
      this.i;
    }
  }    
}	    </pre>
		</td>
	  </tr>
	  
	  <tr>
		<td valign="top">Overlap static and none-static property</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters properties with same name in props(static) and protos(none-static) field.
		</td>
		<td valign="top">Error</td>
		<td>&nbsp;</td>
	  </tr>
	  
	  <tr>
		<td valign="top">Duplicate properties with the same name</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters duplicate properties with the same name.
		</td>
		<td valign="top">Error</td>
		<td>&nbsp;</td>
	  </tr>
	  
	  <tr>
		<td valign="top">Can't redefine variable</td>
		<td valign="top">
		  When enabled, the compiler will issue an error or a warning whenever it encounters redefined variable in the same scope.
		</td>
		<td valign="top">Error</td>
		<td>
		<pre>
//> public void foo()
foo:funcion(){
  var i=1;
  var i=1;
}		</pre>
		</td>
	  </tr>
	</table>

    <p><img border="0"  src="../../../../images/ngrelr.png" alt="Related reference"></p>
    <ul>
      <li><a href="../../../property/code_compliance.htm">Code Compliance Property Page</a></li>
	  <li><a href="./errors_warnings.htm">Errors/Warnings</a></li>
	  <li><a href="./task_tags.htm">Task Tags</a></li>
	  <li><a href="./validators_layout.htm">Validators Preference Page</a></li>
    </ul>
  </body>
</html>

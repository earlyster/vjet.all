<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
<html>
  <head>
    <meta name="copyright" content="Copyright (c) 2012 eBay Inc. and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
    eBay Inc. - initial API and implementation" >
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
    <meta http-equiv="Content-Style-Type" content="text/css">
    <link rel="stylesheet" href="../../book.css" charset="ISO-8859-1" type="text/css">
    <script language="JavaScript" src="PLUGINS_ROOT/org.eclipse.help/livehelp.js"> </script>
    <title>Running your programs</title>
  </head>
  <body>
	<h1>Debugging your programs </h1>
	<p>In this section, you will learn how to debug a VJET program. </p>
	
	<ol>
  	  <li>Please make sure the VJET file <em>MyTest.js</em> is opened in your editor area.</li>
      
      <li>
        Place your cursor on the vertical ruler along the left edge of the editor
    	area on the following line in the main() method: 
    	<p><code>var size = x.length;</code></p>
    	<p>and double-click on the ruler to set a breakpoint.</p>
    	<p><img src="../images/bTutorial/debug1.gif"  alt="MyTest.js editor showing added breakpoint"></p>
    	The breakpoint icon indicates the status of the breakpoint. The plain
    	blue breakpoint icon indicates that the breakpoint has been set, but not yet
    	installed.
  	  </li>
  	  
  	  <li>
  	    From Script Explorer view, select <em>MyTest.js</em> file, <b>Right click</b> on it.
  	    <br>From context menu, select <b>Debug As</b> &gt; <b>VJET JS Application</b>.
        <p><em>Note: the Debug As context menu is also available in other places.</em></p>
  	  </li>
  	  
  	  <li>
    	You can also simply hit the debug button <img src="../images/bTutorial/vjo_debug_button.png" alt="Debug button"> 
        which will launch the currently selected resource or active editor.
      </li>
  	  
  	  <li>
  	    The program will run until the breakpoint is reached.
  	    When the breakpoint is hit, execution is suspended, and you will reach the Debug perspective. 
    	<p>Notice that the process is still active (not terminated) in the Debug view. Other threads might still be running.
    	<p><img src="../images/bTutorial/debug2.gif"  alt="Debug perspective"></p>
  	  </li>
  	  
  	  <li>
  	    In the editor in the Debug perspective, select <code>x.length</code> from the line above
    	where the breakpoint is set, and from its context menu, select <b>Inspect</b>. 
    	<p><img src="../images/bTutorial/debug3.gif"  alt="Test.js editor with selected breakpoint line showing context menu"></p>
  	  </li>
  	
  	  <li>
  	    The expression is evaluated in the context of the current stack frame, and a pop-up appears which displays the results. You can send a result to
    	the Expressions view by pressing the key binding displayed in the pop-up.
    	<p><img src="../images/bTutorial/vjo_editor_test_inspect_value.png"  alt="Test.js inspect pop-up with value"></p>
  	  </li>
  	  
  	  <li>
  	    Expressions that you evaluate while debugging a program will be listed in this view. 
  	    To delete an expression after working with it, select the expression and choose <b>Remove</b> from its context menu. 
  	  </li>
  	  
  	  <li>
  	    The Variables view (available on a tab along with the Expressions view) displays the values of the variables in the selected stack frame. 
  	    Expand the <code>x.length</code> tree in the Variables view until you can see elementCount.
  	  </li>
  	  
  	  <li>
  	    The variables (e.g., size) in the Variables view will change when you step through Test in the Debug view.&nbsp;
  	    To step through the code, click the <b>Step Over</b> (<img src="../../images/org.eclipse.debug.ui/elcl16/stepover_co.png" alt="Step Over" >) button.&nbsp;
        (Or <kbd>F6</kbd> as a shortcut). Execution will continue at the next line in the same method (or, if you are at the end of a method, it will continue in the method from which the current method was called).
    	<p><img src="../images/bTutorial/vjo_view_variables_1.png"  alt="Variables view"></p>
  	  </li>
  	  
  	  <!--
  	  <li>
  	    In the variables view you can choose to see certain types as logical structures. 
  	    This hides the implementation details of a type and simply shows it as arrays or fields. 
  	    You can define logical structures by yourself in the preference page <b>VJO &gt; Debug &gt; Logical Structures</b>
   	    <font color="red">Not yet implemented</font>).
  		<p><img src="../images/bTutorial/vjo_view_variables_logical_structures.png" alt="fFull shown as logical structure"></p>
  	  </li>
      -->
    
  	  <li> 
  	    Try some other step buttons 
    	(<b>Step Into</b> <img src="../../images/org.eclipse.debug.ui/elcl16/stepinto_co.png" alt="Step Into" >, 
    	<b>Step Return</b> <img src="../../images/org.eclipse.debug.ui/elcl16/stepreturn_co.png" alt="Step Return" >)to
    	step through the code.&nbsp; Note the differences in stepping techniques.
    	Select the <strong>Use Step Filters </strong> command [ <img src="../../images/org.eclipse.debug.ui/elcl16/stepbystep_co.png" alt="Use Step Filters"> ] to change whether step filters should be used in the <a href="../../../org.eclipse.jdt.doc.user/reference/views/debug/ref-debug_view.htm"><strong>Debug View</strong></a>.
    	Step filters are commonly used to filter out types that you do not wish to see or step through while debugging.
    	<br/>For example, if you did not want to the see or step through anything from the URI pattern <em><strong>test.Test.*</strong></em>, you would add this to the list of filtered URIs. 
    	<br/>Adding URIs to the list of those to be filtered can be done via the <a class="command-link" href='javascript:executeCommand("org.eclipse.ui.window.preferences(preferencePageId=org.eclipse.vjet.eclipse.preferences.debug.stepfiltering)")'> <img src="PLUGINS_ROOT/org.eclipse.help/command_link.png" alt="Opens the Step Filtering preference page"> <strong>VJET &gt; Debug &gt; Step Filtering</strong></a> preference page.  
  	  </li>

	  <li>
	  You can end a debugging session by allowing the program to run to completion or by terminating it.
      <ul type = "square">
        <li>
          You can continue to step over the code with the <b>Step </b>buttons until the program completes.
        </li>
        <li>
          You can click the&nbsp; <strong>Resume </strong>  
      	  (<img src="../../images/org.eclipse.debug.ui/elcl16/resume_co.png" alt="Resume" >) button to allow the
          program to run until the next breakpoint is encountered or until the program is completed.
        </li>
      	<li>
      	  You can select <b>Terminate</b> from the context menu of the program's process in the Debug view to terminate the program.
      	</li>
      </ul>
      </li>
  	</ol>
	<p class="nav_footer" id="nav_footer">Next Section: <a href="using_vjo_browsing_perspective.htm">Using the VJET browsing perspective</a></p>

    <p><img src="../../images/ngrelr.png"  border="0" alt="Related reference"><br>
    <ul> 
      <li><a href="../../reference/preferences/vjo/debug/debug_layout.htm">Debug preferences</a></li>
      <li><a href="../../reference/menus/menu_run.htm">Run menu actions</a></li>
      <li><a href="../../reference/menus/run_and_debug_toolbar.htm">Run and debug toolbar actions</a></li>
	</ul>
  </body>
</html>

